ylab("Fitted survival") + xlab(xlab1) +
theme(legend.justification = c(1, 0), legend.position = c(1, 0.2)) +
theme(legend.title = element_blank()) +
geom_point(size = 4, alpha = 1, pch = 21,
position = position_jitter(h = 0.05)) +
scale_colour_manual(breaks = c("past", "present"),
values = c("darkgray", "black"))
size2 + layer(stat = "smooth", stat_params = list(method = "lm", se = FALSE, size = 10))
size1 + geom_point(aes(y = fitted, color = time)) +
layer(stat = "smooth", stat_params = list(method = "lm", se = FALSE, size = 10))
summary(globalMod) # random effects contribute to 0 variance,
#hence the perfect overlap between GLM and GLMER
size1 + stat_smooth(method = "lm", se = TRUE, size = 2,
aes(color = NULL), linetype = 1, color = 1) +
geom_line(aes(y = fitted, color = time), size = 1, linetype = 2) +
labs(title = "B") + ULClabel +
geom_abline(a = 0, b = 1, linetype = 3)
ULClabel <- theme(plot.title = element_text(hjust = -0.15, vjust = 0, size = rel(1.2)))
sizePlot <- size1 +
geom_smooth(method = "lm", se = FALSE, size = 1) +
labs(title = "B") + ULClabel +
geom_abline(a = 0, b = 1, linetype = 2, color = "gray")
sizePlot
# Save lmerDat as different file
dat_growth <- lmerDat
size1 <- ggplot(dat_growth, aes(ini.area, fin.area, color = time, shape = time)) +
ylab(ylab_growth) + xlab(xlab_growth) +
theme(legend.justification = c(0, 0), legend.position = c(0.5, -0.05)) +
theme(legend.title = element_blank()) +
geom_point(size = 2.5, alpha = 0.6,
position = position_jitter(h = 0.05)) +
scale_colour_manual(breaks = c("past", "present"),
values = c("darkgray", "black"),
labels = c("1969-1972", "2007-2010")) +
scale_shape_manual(breaks = c("past", "present"),
values = c(18, 20),
labels = c("1969-1972", "2007-2010"))
sizePlot <- size1 +
geom_smooth(method = "lm", se = FALSE, size = 0.75) +
# labs(title = "B") + ULClabel +
geom_abline(a = 0, b = 1, linetype = 2, color = "black", size = 0.5)
sizePlot
ggsave("./figs/growthPlot.pdf", height = 3.5, width = 3.5)
####################################
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
##### LOAD PACKAGES ETC #####
library(fields) # need for image.plot
library(ggplot2)
theme_set(theme_classic(base_size = 12))
library(dplyr)
source("./R/baelParamsWA.R")
source("./R/ipmFunctions.R")
source("./R/metabolicTheory.R")
source("./R/multiplotF.R")
source("./R/modify_vital_rates.R")
# Temperatures
modTemp <- 9.25 + 273.15
hisTemp <- 8.6 + 273.15
#### SET GLOBAL PARAMETERS FOR THE SIMULATIONS #####
### Range of activation energies; 0.2 - 1.2
lowerEa <- 0.2; upperEa <- 1.2; Ea_increment <- 0.2
### Range of temperatures; 8-9.5 degrees C
lowerTemp <- 281.5; upperTemp <- 282.65; temp_increment <- 0.05;
originalTemp <- modTemp
##### MODIFYING VITAL RATES WITH THE ARRHENIUS EQUATION: GROWTH #####
growthGrid <- modifyVitalRates(slope = params$growth.slope, slopeTempEffect = "neg",
intercept = params$growth.int, interceptTempEffect = "pos",
lowerEa, upperEa, Ea_increment,
lowerTemp, upperTemp, temp_increment,
originalTemp)
head(growthGrid)
##### MODIFYING VITAL RATES WITH THE ARRHENIUS EQUATION: SURVIVAL #####
survivalGrid <- modifyVitalRates(slope = params$surv.slope, slopeTempEffect = "neg",
intercept = params$surv.int, interceptTempEffect = "neg",
lowerEa, upperEa, Ea_increment,
lowerTemp, upperTemp, temp_increment,
originalTemp)
head(survivalGrid)
# sample plot of the slope as a function of temperature and Ea ####
ggplot(survivalGrid, aes((Kelvin-273.15),
vec_slope, color = as.factor(Ea))) +
geom_point(alpha = 0.2, size = 2) + theme_bw() +
xlab("Temperature (C)") + ylab("") +
geom_smooth(se = FALSE) +
theme(legend.justification = c(1,1), legend.position = c(1, 1)) +
guides(color = guide_legend(reverse=TRUE)) +
scale_color_discrete(name = "Activation\nEnergy") +
theme(text = element_text(size = 18)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12))
##### COLLATE VITAL RATES INTO FINAL DATAFRAME FOR IPMS #####
simulationDF <- growthGrid %>% select(Kelvin:row) %>%
rename(simulation = row)
# Growth: constant intercept, but variable slope
growthDF <- cbind(simulationDF, growthGrid$const_int, growthGrid$vec_slope,
survivalGrid$const_int, survivalGrid$const_slope)
names(growthDF)[4:7] <- c("growth.int", "growth.slope", "surv.int", "surv.slope")
growthDF$parameter <- "Growth"
# Survival: constant intercept, but variable slope
survDF <- cbind(simulationDF, growthGrid$const_int, growthGrid$const_slope,
survivalGrid$const_int, survivalGrid$vec_slope)
names(survDF)[4:7] <- c("growth.int", "growth.slope", "surv.int", "surv.slope")
survDF$parameter <- "Survival"
# Survival and Growth: variable slopes for both
survGrowthDF <- cbind(simulationDF, growthGrid$const_int, growthGrid$vec_slope,
survivalGrid$const_int, survivalGrid$vec_slope)
names(survGrowthDF)[4:7] <- c("growth.int", "growth.slope", "surv.int", "surv.slope")
survGrowthDF$parameter <- "Survival and growth"
# Combine all scenarios into one dataframe
masterDF <- rbind(growthDF, survDF, survGrowthDF)
masterDF$row <- seq(1:nrow(masterDF))
masterDF2 <- masterDF %>% filter(parameter == "Growth")
##### RUN IPMS AND EXTRACT POPULATION-LEVEL TRAITS #####
### ACCORDING TO VITAL RATES DEFINED ABOVE
###1.4.4 Make a kernel###
min.size <- .9*min(c(growthDat$size,growthDat$sizeNext), na.rm=T)
max.size <- 1.1*max(c(growthDat$size,growthDat$sizeNext), na.rm=T)
min.size <- 0.02
max.size <- 2.02
n <- 100 # number of cells in the matrix
b <- min.size+c(0:n)*(max.size-min.size)/n # boundary points (edges of cells defining the matrix)
b
y <- 0.5*(b[1:n]+b[2:(n+1)]) # mesh points (i.e., midpoints to be used in numerical integration)
y
h <- y[2]-y[1] # step size (i.e., width of cells)
h
loopDat <- masterDF2
AllReps <- unique(loopDat$row)
N <- length(AllReps); N
AllReps[g]
AllReps[2]
row.g <- AllReps[2]
row.g
colnames(mat1) <- c("lambda", "maxSize95", "maxSize99", "meanSize")
### Set up a for loop to run the IPM simulations
loopDat <- masterDF2
AllReps <- unique(loopDat$row)
N <- length(AllReps); N
# Create a matrix to store the results
mat1 <- matrix(nrow = N, ncol = 4)
colnames(mat1) <- c("lambda", "maxSize95", "maxSize99", "meanSize")
# Loop over each row in masterDF
for(g in 1:N){
row.g <- AllReps[g]
param.g <- data.frame(
growth.int = loopDat$growth.int[row.g],
growth.slope = loopDat$growth.slope[row.g],
growth.sd = params$growth.sd,
embryo.int = params$embryo.int,
embryo.slope = params$embryo.slope,
mature.size = - params$embryo.int/params$embryo.slope,
recruit.size.mean = params$recruit.size.mean,
recruit.size.sd = params$recruit.size.sd,
estab.prob.mean = params$estab.prob.mean,
surv.int = loopDat$surv.int[row.g],
surv.slope = loopDat$surv.slope[row.g])
S <- s.x(y, params = param.g) 						# survival
F <- h*outer(y, y, f.yx, params = param.g)  	# reproduction
G <- h*outer(y, y, g.yx, params = param.g) 	# growth
P <- G # placeholder; redefine P on the next line
# fix eviction of offspring
for(i in 1:(n/2)) {
G[1,i] <- G[1,i] + 1-sum(G[,i])
P[,i] <- G[,i]*S[i]
}
# fix eviction of large adults
for(i in (n/2+1):n) {
G[n,i] <- G[n,i] + 1 - sum(G[,i])
P[,i]<-G[,i]*S[i]
}
K <- P + F  			# full matrix
# calculate lambda
lam <- Re(eigen(K)$values[1]) # returns dominant eigenvalue, which gives the asymptotic population growth rate
# calculate max size (99% of stable size distribution)
w.eigen <- Re(eigen(K)$vectors[,1])
stable.dist <- w.eigen/sum(w.eigen)
maxSize95 <- y[min(which(cumsum(stable.dist) > 0.95))]
maxSize99 <- y[min(which(cumsum(stable.dist) > 0.99))]
meanSize <- sum(y*stable.dist)
# populate matrix with continuous variables
mat1[g,] <- c(lam, maxSize95, maxSize99, meanSize)
}
head(mat1)
mat2 <- cbind(masterDF, mat1)
mat2$Ea <- as.factor(mat2$Ea)
# Rename simulated dataframe
simDat <- mat2
##### PLOT SIMULATED DATA #####
# Plotting details
label1 <- expression(paste("Maximum size (", cm^2, ")"))
tempLab <- expression(paste("Temperature (", degree, "C)"))
regression <- geom_smooth(method = "lm", se = FALSE, alpha = 0.5,
size = 0.4)
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 1,
size = rel(1.5)))
maxSizePlot <- ggplot(data = simDat,
aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75)) +
facet_wrap(~ parameter)
maxSizePlot
head(mat1)
head(mat1)
mat2 <- cbind(masterDF2, mat1)
mat2$Ea <- as.factor(mat2$Ea)
# Rename simulated dataframe
simDat <- mat2
##### PLOT SIMULATED DATA #####
# Plotting details
label1 <- expression(paste("Maximum size (", cm^2, ")"))
tempLab <- expression(paste("Temperature (", degree, "C)"))
regression <- geom_smooth(method = "lm", se = FALSE, alpha = 0.5,
size = 0.4)
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 1,
size = rel(1.5)))
# Max size plot
maxSizePlot <- ggplot(data = simDat,
aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75)) +
facet_wrap(~ parameter)
maxSizePlot
maxSizePlot <- ggplot(data = simDat,
aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
maxSizePlot <- ggplot(data = simDat,
aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1, 1)) +
scale_color_discrete(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
##### GET OBSERVED MAX SIZES #####
# Present size data already stored here, from ipmData.csv:
names(hist0710)
range(hist0710$area)
# Past size data in histoData.csv:
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
head(dat)
### Initial data
unique(dat$ini.notes)
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
dim(ini.dat)
### Final data
unique(dat$fin.notes)
fin.dat <- droplevels(dat[dat$fin.notes != "angle" & dat$fin.notes != "fuzzy" &
dat$fin.notes != "gone" & dat$fin.notes != "nv" &
dat$fin.notes != "tentacles" & dat$fin.notes != "algae" &
dat$fin.notes != "dead" & dat$fin.notes != "overgrown", ])
fin.dat <- droplevels(fin.dat[complete.cases(fin.dat$fin.area), ]) # drop NAs
unique(fin.dat$fin.notes)
dim(fin.dat)
ini.sc<- subset(ini.dat, site=="SC")
fin.sc <- subset(fin.dat, site == "SC")
ini.sc$tempC <- with(ini.sc, ifelse(time == "past", hisTemp-273.15, modTemp-273.15))
fin.sc$tempC <- with(fin.sc, ifelse(time == "past", hisTemp-273.15, modTemp-273.15))
# Initial data
ggplot(ini.sc, aes(tempC, ini.area)) +
geom_violin(alpha = I(0.5), aes(color = time),
position = position_jitter(width = 0.01))
# Final data
ggplot(fin.sc, aes(tempC, fin.area)) +
geom_violin(alpha = I(0.5), aes(color = time),
position = position_jitter(width = 0.01))
initialSize <- ini.sc %>% group_by(time) %>%
summarise(maxSize = max(ini.area))
finalSize <- fin.sc %>% group_by(time) %>%
summarise(maxSize = max(fin.area))
initialSize
finalSize
sizeObs <- initialSize
sizeObs$tempC <- c(hisTemp-273.15, modTemp-273.15)
# substitute max size from largest observed size (to match past data)
sizeObs$maxSize[2] <- max(hist0710$area)
sizeObs
##### GET PREDICTED MAX SIZES  #####
# Empirical historical and modern growth and survival functions
# Predicted modern size (empirical growth and survival functions)
# what is the predicted size at the modern temp?
modTemp
maxSizeModPred <- simDat[simDat$Kelvin == modTemp &
simDat$Ea == 0.6, ]$maxSize99
maxSizeModPred
# what is the predicted size, using the IPM with the historical
# growth slope?
source("bael_IPM_historicGrowth.R")
maxSizeHistPred <- res1$max99
res0$max99 # should be the same as maxSizeModPred
maxSizeModPred <- res0$max99
# Create data frame with predicted size at modern temp (above)
# and predicted size at historic temperature, using the empirical
# growth function for past data
maxSizePred <- data.frame(
era = c("Historic", "Modern"),
tempC = c(hisTemp-273.15, modTemp-273.15),
size = c(maxSizeHistPred, maxSizeModPred)
)
##### FINAL PLOTS  #####
# observed points
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 16, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 17, color = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
ggsave("./figs/ipm_temp.pdf", width = 3.5, height = 3.5)
maxSizePlot <- ggplot(data = simDat,
aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
maxSizePlot + maxObs + pPred
ggsave("./figs/ipm_temp.pdf", width = 3.5, height = 3.5)
mat2 <- cbind(masterDF2, mat1)
# mat2$Ea <- as.factor(mat2$Ea)
# Rename simulated dataframe
simDat <- mat2
label1 <- expression(paste("Maximum size (", cm^2, ")"))
tempLab <- expression(paste("Temperature (", degree, "C)"))
regression <- geom_smooth(method = "lm", se = FALSE, alpha = 0.5,
size = 0.4)
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 1,
size = rel(1.5)))
# Max size plot
maxSizePlot <- ggplot(data = simDat,
aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
maxSizePlot <- ggplot(data = simDat, aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
# scale_color_discrete(name = "Activation\nenergy") +
scale_color_continuous(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
mat2$Ea <- as.factor(mat2$Ea)
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 16, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 17, color = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
##### PLOT SIMULATED DATA #####
# Plotting details
label1 <- expression(paste("Maximum size (", cm^2, ")"))
tempLab <- expression(paste("Temperature (", degree, "C)"))
regression <- geom_smooth(method = "lm", se = FALSE, alpha = 0.5,
size = 0.4)
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 1,
size = rel(1.5)))
# Max size plot
maxSizePlot <- ggplot(data = simDat, aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
# scale_color_continuous(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
maxSizePlot <- ggplot(data = simDat, aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
# scale_color_continuous(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
head(mat1)
mat2 <- cbind(masterDF2, mat1)
mat2$Ea <- as.factor(mat2$Ea)
# Rename simulated dataframe
simDat <- mat2
##### PLOT SIMULATED DATA #####
# Plotting details
label1 <- expression(paste("Maximum size (", cm^2, ")"))
tempLab <- expression(paste("Temperature (", degree, "C)"))
regression <- geom_smooth(method = "lm", se = FALSE, alpha = 0.5,
size = 0.4)
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 1,
size = rel(1.5)))
# Max size plot
maxSizePlot <- ggplot(data = simDat, aes((Kelvin-273.15), maxSize99, color = Ea)) +
xlab(tempLab) + ylab(label1) +
geom_point(alpha = 0.5, size = 0) +
geom_smooth(se = FALSE, size = 0.7) +
theme(legend.justification = c(1,1), legend.position = c(1.1, 1.1)) +
scale_color_discrete(name = "Activation\nenergy") +
# scale_color_continuous(name = "Activation\nenergy") +
guides(color = guide_legend(reverse=TRUE)) +
coord_cartesian(ylim = c(0.9, 1.75))
maxSizePlot
# observed points
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 16, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 17, color = c("darkgray", 1))
maxSizePlot + maxObs + pPred
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 22, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 23, color = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 22, fill = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 23, fill = c("darkgray", 1))
maxSizePlot + maxObs + pPred
# observed points
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 22, fill = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 23, fill = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 22, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 23, color = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 15, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 18, color = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 15, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 4, shape = 18, color = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
ggsave("./figs/ipm_temp.pdf", width = 3.5, height = 3.5)
maxObs <- geom_point(aes(tempC, maxSize),
data = sizeObs,
size = 3, shape = 15, color = c("darkgray", 1))
# predicted points
pPred <- geom_point(aes(tempC, size),
data = maxSizePred,
size = 3, shape = 17, color = c("darkgray", 1))
# final plot
maxSizePlot + maxObs + pPred
ggsave("./figs/ipm_temp.pdf", width = 3.5, height = 3.5)
