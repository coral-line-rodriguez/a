theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
meanDensPlot <- ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 4, alpha = 1,
position = position_jitter(width = 0.05),
aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
### Data preparation
### Remove everything unnecessary for histograms of initial data
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
head(ini.dat)
# create new column for Site_era
ini.dat$siteEra <- as.factor(paste(ini.dat$site, ini.dat$time, sep = "_"))
unique(ini.dat$siteEra)
# Reorder levels for plotting
ini.dat$siteEra <- factor(ini.dat$siteEra, rev(c("SC_past", "SC_present",
"PG_present", "ON_present")))
# violin plot
my_label <- expression(paste("Density (no. ", m^-2, ")"))
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 1,
size = rel(1.2)))
sizePlot <- ggplot(ini.dat,  aes(x = siteEra, y = ini.area, fill = time)) +
ylab(expression(paste("Size (", cm^2, ")"))) +
geom_violin(position = position_dodge(1)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
scale_x_discrete("", labels = c("SC_past" = "Shady Cove\n1969\nn=164",
"SC_present" = "Shady Cove\n2007\nn=144",
"PG_present" = "Point George\n2007\nn=159",
"ON_present" = "O'Neal\n2007\nn=315")) +
coord_flip() + theme(legend.position = "none") +
scale_fill_manual(values = c("darkgray", "white"))
p1 <- sizePlot + labs(title = "A") + ULClabel
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
### Data preparation
### Remove everything unnecessary for histograms of initial data
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
head(ini.dat)
# create new column for Site_era
ini.dat$siteEra <- as.factor(paste(ini.dat$site, ini.dat$time, sep = "_"))
unique(ini.dat$siteEra)
# Reorder levels for plotting
ini.dat$siteEra <- factor(ini.dat$siteEra, rev(c("SC_past", "SC_present",
"PG_present", "ON_present")))
# violin plot
my_label <- expression(paste("Density (no. ", m^-2, ")"))
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 1,
size = rel(1.2)))
sizePlot <- ggplot(ini.dat,  aes(x = siteEra, y = ini.area, fill = time)) +
ylab(expression(paste("Size (", cm^2, ")"))) +
geom_violin(position = position_dodge(1)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
scale_x_discrete("", labels = c("SC_past" = "Shady Cove\n1969\nn=164",
"SC_present" = "Shady Cove\n2007\nn=144",
"PG_present" = "Point George\n2007\nn=159",
"ON_present" = "O'Neal\n2007\nn=315")) +
coord_flip() + theme(legend.position = "none") +
scale_fill_manual(values = c("darkgray", "white"))
p1 <- sizePlot + labs(title = "A") + ULClabel
p3 <- meanDensPlot + ULClabel + labs(title = "B Shady Cove")
p2
p3
p3 <- meanDensPlot + ULClabel + labs(title = "B                    Shady Cove")
p3
multiplot(p1, p2, cols = 2)
multiplot(p1, p3, cols = 2)
p3 <- meanDensPlot + ULClabel + labs(title = "B    Shady Cove")
p3
multiplot(p1, p3, cols = 2)
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
meanDensPlot <- ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 3, alpha = 1,
position = position_jitter(width = 0.05),
aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
p3 <- meanDensPlot + ULClabel + labs(title = "B              Shady Cove")
p3
# with mean quad densities
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
# with mean quad densities
p3 <- meanDensPlot + ULClabel + labs(title = "B                 Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel + labs(title = "B         Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel + labs(title = "B                 Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel + labs(title = "  B              Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B       Shady Cove        ")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B                 Shady Cove        ")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B                 Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
Cand.mod <- list()
Cand.mod[[1]] <- lmer(meanDens ~ era + (1|tran),
REML = FALSE, data = meanDensData)
Cand.mod[[2]] <- lmer(meanDens ~ 1 + (1|tran),
REML = FALSE, data = meanDensData)
# Present the more conservative statistical results in manuscript
# (meanDensData)
#generate AICc table with names
mod_text <- c("Era", "Null model")
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, "./output/densityAIC.csv")
summary(Cand.mod[[1]])
bestMod <- Cand.mod[[1]]
# check normality and homogeneity of variances
par(mfrow = c(1,2))
qqnorm(resid(bestMod))
qqline(resid(bestMod))
plot(resid(bestMod) ~ fitted(bestMod)); abline(h=0)
library(lme4)
library(ggplot2)
library(AICcmodavg)
# rm(list=ls(all=TRUE)) # removes all previous material from R's memory
dat <- read.csv("./data/bael_survivalData.csv", header=TRUE, na.strings="NA")
source("./R/graphicalParams.R")
source("./R/multiplotF.R")
dat
names(dat)
summary(dat)
dim(dat)
dat$ini.areaLN <- log(dat$ini.area)
dat$fin.areaLN <- log(dat$fin.area)
##########################################################
##########################################################
# LMER; TEST SC DATA ONLY (TRUNCATED)
##########################################################
##########################################################
# lme4
# test whether survival is differrent among eras
lmerDat <- dat[dat$ini.area < 0.96, ]
#lmerDat <- datSC
dim(lmerDat)
unique(lmerDat$quad)
Cand.mod <- list()
Cand.mod[[1]] <- glmer(survival ~ ini.area*time + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[2]] <- glmer(survival ~ ini.area + time + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[3]] <- glmer(survival ~ ini.area + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[4]] <- glmer(survival ~ time + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[5]] <- glmer(survival ~ 1 + (1|quad),
data = lmerDat, family = binomial)
#generate AICc table with names
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Size", "Era + Size", "Size", "Era", "Null model")
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, "./output/survivalAIC.csv")
summary(Cand.mod[[1]])
# check normality and homogeneity of variances
globalMod <- Cand.mod[[1]] #
# check normality and homogeneity of variances
par(mfrow = c(1,2))
qqnorm(resid(globalMod))
qqline(resid(globalMod))
plot(resid(globalMod) ~ fitted(globalMod)); abline(h=0)
summary(globalMod)
fitted(globalMod)
# tables of estimates with 95% CI
se <- sqrt(diag(vcov(globalMod)))
tab <- cbind(Est = fixef(globalMod),
LL = fixef(globalMod)  - 1.96 * se,
UL = fixef(globalMod) + 1.96 * se)
tab
# odds ratios, by exponentiation
exp(tab)
# caterpillar plot
ranef(globalMod, which = "quad", condVar = TRUE)
library(sjPlot)
sjp.lmer(globalMod)
sjp.lmer(globalMod, type = "fe.cor")
sjp.lmer(globalMod, type = "re.qq")
sjp.lmer(globalMod, fade.ns = TRUE, free.scale = TRUE,
geom.colors = c(1,1), showValueLabels = FALSE,
sort.coef = TRUE)
sjp.lmer(globalMod, fade.ns = TRUE, free.scale = TRUE,
geom.colors = c(1,1), showValueLabels = FALSE,
type = "fe")
##########################################################
##########################################################
# COMPARE PARAMETERS
##########################################################
##########################################################
glm1 <- glm(survival ~ ini.area*time, data = lmerDat, family = binomial)
summary(glm1)
head(dat)
datPres <- lmerDat[lmerDat$time == "present", ]
datPast <- lmerDat[lmerDat$time == "past", ]
pastMod <- glmer(survival ~ ini.area + (1|quad),
data = datPast, family = binomial)
presMod <- glmer(survival ~ ini.area + (1|quad),
data = datPres, family = binomial)
pastMod2 <- glm(survival ~ ini.area,
data = datPast, family = binomial)
presMod2 <- glm(survival ~ ini.area,
data = datPres, family = binomial)
summary(pastMod)
summary(pastMod2)
summary(presMod)
summary(presMod2)
curve(plogis(0.5186 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(1.7106 + 0.4489*x), lwd = 2, col = 1, add = TRUE)
ggplot(data.frame(x = c(0, 0.96)), aes(x)) +
stat_function(fun = function(x)x^2, geom = "line")
survTrendPast <- ggplot(data.frame(x = c(0, 0.95)), aes(x)) +
stat_function(fun = function(x) plogis(x*3.4776 + 0.5186),
geom = "line", size = 1.5, color = "darkgray") +
scale_y_continuous(limits = c(0, 1))
survTrendPres <- ggplot(data.frame(x = c(0, 0.95)), aes(x)) +
stat_function(fun = function(x) plogis(x*0.4489 + 1.7106),
geom = "line", size = 1.5, color = "black") +
scale_y_continuous(limits = c(0, 1))
survTrendPast
survTrendPres
survTrendPast2 <- stat_function(fun = function(x)
plogis(x*3.4776 + 0.5186),
geom = "line", size = 1, color = "darkgray")
survTrendPres2 <- stat_function(fun = function(x)
plogis(x*0.4489 + 1.7106),
geom = "line", size = 1, color = "black")
survTrendPast + survTrendPres2
##########################################################
##########################################################
# FIGURE - SURVIVAL SCALING BY ERA (TRUNCATED)
##########################################################
##########################################################
ylab1 <- "Survival at time t+3"
xlab1 <- expression(paste("Size at time t (", cm^2, ")"))
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 0, size = rel(1.2)))
# ULClabel <- theme(plot.title = element_text(hjust = -0.15, vjust = 0, size = rel(1.2)))
theme_set(theme_classic(base_size = 12))
surv1 <- ggplot(lmerDat, aes(ini.area, survival,
color = time, shape = time)) +
ylab(ylab1) + xlab(xlab1) +
theme(legend.justification = c(1, 0), legend.position = c(1, 0.2)) +
theme(legend.title = element_blank()) +
geom_point(size = 4, alpha = 0.8,
position = position_jitter(h = 0.05)) +
scale_colour_manual(breaks = c("past", "present"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("past", "present"),
values = c(18, 20))
survPlot <- surv1 + labs(title = "A") + ULClabel +
survTrendPast2 + survTrendPres2 + theme(legend.position = "none")
survPlot
# RENAME lmerDat
dat_survival <- lmerDat
survTrendPres
summary(pastMod)
summary(pastMod2)
summary(presMod)
summary(presMod2)
summary(pastMod)
summary(presMod)
dat <- read.csv("./data/bael_growthData.csv", header=TRUE, na.strings="NA")
source("./R/graphicalParams.R")
dat
names(dat)
summary(dat)
dim(dat)
dat$ini.areaLN <- log(dat$ini.area)
dat$fin.areaLN <- log(dat$fin.area)
datSC <- dat
# Create dataset for SC present
datSCpresent <- datSC[datSC$time == "present", ]
# Create dataset for SC past
datSCpast <- datSC[datSC$time == "past", ]
dim(datSC)
dim(datSCpresent)
dim(datSCpast)
range(datSCpast$ini.area) # 1.669
range(datSCpresent$ini.area) # 0.828
# Truncate initial size range so that era's match at upper limit
presMaxSC <- max(datSCpresent[datSCpresent$time == "present", ]$ini.area)
set_graph_pars(ptype = "panel1")
plot(fin.area ~ ini.area, data = datSCpast)
#abline(v = presMaxSC)
points(fin.area ~ ini.area, data = datSCpresent, col = "red")
abline(v = 0.96, col = "black", lty = 3)
abline(a = 0, b = 1, col = "darkgray", lty = 2, lwd = 2)
datSCTrunc <- datSC[datSC$ini.area <= 0.96, ]
##########################################################
##########################################################
# LMER; TEST SC DATA ONLY (TRUNCATED)
##########################################################
##########################################################
lmerDat <- datSCTrunc
dim(lmerDat)
names(lmerDat)
# SIZE: LINEAR
# RANDOM EFFECTS
mod1 <- lmer(fin.area ~ ini.area*time +  (1|quad),
REML = TRUE, data=lmerDat)
mod2 <- lmer(fin.area ~ ini.area*time +  (1|quadOriginal),
REML = TRUE, data=lmerDat)
AIC(mod1, mod2)
anova(mod1, mod2)
summary(mod2)
# use varying slopes by quadrat? no - doesn't add anything
mod1 <- lmer(fin.area ~ ini.area*time +  (ini.area|quad),
REML = FALSE, data=lmerDat)
summary(mod1)
mod2 <- lmer(fin.area ~ ini.area*time + (1|quad),
REML = FALSE, data=lmerDat)
summary(mod2)
AIC(mod1, mod2) # mod 1 is better; including
lm1 <- lm(fin.area ~ ini.area*time, data=lmerDat)
summary(lm1)
Cand.mod <- list()
Cand.mod[[1]] <- lmer(fin.area ~ ini.area*time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[2]] <- lmer(fin.area ~ ini.area + time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[3]] <- lmer(fin.area ~ ini.area  + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[4]] <- lmer(fin.area ~ time + (1|quad),
REML = FALSE, data = lmerDat)
Cand.mod[[5]] <- lmer(fin.area ~ 1 + (1|quad),
REML = FALSE, data=lmerDat)
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Size", "Era + Size", "Size", "Era", "Null model")
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, "./output/growthAIC.csv")
globalMod <- Cand.mod[[1]]
summary(globalMod)
##########################################################
##########################################################
# MODEL PARAMETERS BY ERA
##########################################################
##########################################################
datSCpastTrunc <- datSCpast[datSCpast$ini.area <= 0.96, ]
datSCpresent
datSCpastTrunc
presMod <- lmer(fin.area ~ ini.area + (1|quad),
REML = FALSE, data = datSCpresent)
pastMod <- lmer(fin.area ~ ini.area + (1|quad),
REML = FALSE, data = datSCpastTrunc)
summary(presMod)
summary(presMod)
summary(pastMod)
curve(plogis(0.5186 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(1.7106 + 0.4489*x), lwd = 2, col = 1, add = TRUE)
curve(plogis(0.5186 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(0.5186 + 0.4489*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(0.5186 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(1.7106 + 0.4489*x), lwd = 2, col = 1, add = TRUE)
curve(plogis(0.5186 + 0.4489*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(0.5186 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(1.7106 + 0.4489*x), lwd = 2, col = 1, add = TRUE)
curve(plogis(0.5186 + 0.4489*x), ylim = c(0,1), lwd = 2, col = "red", add = TRUE)
curve(plogis(1.7106 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "red", add = TRUE)
curve(plogis(0.5186 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(1.7106 + 0.4489*x), lwd = 2, col = 1, add = TRUE)
curve(plogis(0.5186 + 0.4489*x), ylim = c(0,1), lwd = 2, col = "red", add = TRUE)
curve(plogis(1.7106 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "blue", add = TRUE)
summary(pastMod)
summary(presMod)
summary(presMod)
dat <- read.csv("./data/bael_survivalData.csv", header=TRUE, na.strings="NA")
source("./R/graphicalParams.R")
source("./R/multiplotF.R")
dat
names(dat)
summary(dat)
dim(dat)
dat$ini.areaLN <- log(dat$ini.area)
dat$fin.areaLN <- log(dat$fin.area)
##########################################################
##########################################################
# LMER; TEST SC DATA ONLY (TRUNCATED)
##########################################################
##########################################################
# lme4
# test whether survival is differrent among eras
lmerDat <- dat[dat$ini.area < 0.96, ]
#lmerDat <- datSC
dim(lmerDat)
unique(lmerDat$quad)
Cand.mod <- list()
Cand.mod[[1]] <- glmer(survival ~ ini.area*time + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[2]] <- glmer(survival ~ ini.area + time + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[3]] <- glmer(survival ~ ini.area + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[4]] <- glmer(survival ~ time + (1|quad),
data = lmerDat, family = binomial)
Cand.mod[[5]] <- glmer(survival ~ 1 + (1|quad),
data = lmerDat, family = binomial)
#generate AICc table with names
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Size", "Era + Size", "Size", "Era", "Null model")
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, "./output/survivalAIC.csv")
summary(Cand.mod[[1]])
# check normality and homogeneity of variances
globalMod <- Cand.mod[[1]] #
# check normality and homogeneity of variances
par(mfrow = c(1,2))
qqnorm(resid(globalMod))
qqline(resid(globalMod))
plot(resid(globalMod) ~ fitted(globalMod)); abline(h=0)
summary(globalMod)
fitted(globalMod)
# tables of estimates with 95% CI
se <- sqrt(diag(vcov(globalMod)))
tab <- cbind(Est = fixef(globalMod),
LL = fixef(globalMod)  - 1.96 * se,
UL = fixef(globalMod) + 1.96 * se)
tab
# odds ratios, by exponentiation
exp(tab)
# caterpillar plot
ranef(globalMod, which = "quad", condVar = TRUE)
library(sjPlot)
sjp.lmer(globalMod)
sjp.lmer(globalMod, type = "fe.cor")
sjp.lmer(globalMod, type = "re.qq")
sjp.lmer(globalMod, fade.ns = TRUE, free.scale = TRUE,
geom.colors = c(1,1), showValueLabels = FALSE,
sort.coef = TRUE)
sjp.lmer(globalMod, fade.ns = TRUE, free.scale = TRUE,
geom.colors = c(1,1), showValueLabels = FALSE,
type = "fe")
##########################################################
##########################################################
# COMPARE PARAMETERS
##########################################################
##########################################################
glm1 <- glm(survival ~ ini.area*time, data = lmerDat, family = binomial)
summary(glm1)
head(dat)
datPres <- lmerDat[lmerDat$time == "present", ]
datPast <- lmerDat[lmerDat$time == "past", ]
pastMod <- glmer(survival ~ ini.area + (1|quad),
data = datPast, family = binomial)
presMod <- glmer(survival ~ ini.area + (1|quad),
data = datPres, family = binomial)
pastMod2 <- glm(survival ~ ini.area,
data = datPast, family = binomial)
presMod2 <- glm(survival ~ ini.area,
data = datPres, family = binomial)
summary(pastMod)
summary(pastMod2)
summary(presMod)
summary(presMod2)
summary(pastMod)
summary(presMod)
curve(plogis(0.5186 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "darkgray")
curve(plogis(1.7106 + 0.4489*x), lwd = 2, col = 1, add = TRUE)
curve(plogis(0.5186 + 0.4489*x), ylim = c(0,1), lwd = 2, col = "red", add = TRUE)
curve(plogis(1.7106 + 3.4766*x), ylim = c(0,1), lwd = 2, col = "blue", add = TRUE)
summary(pastMod)
