# Create params DF with modified growth function
# Summary of modeled parameters
summary(pastMod)
summary(pastModAll)
summary(presMod)
# Fitted coefficients of general linear model
fixef(pastMod)
fixef(pastModAll)
# Create new paramsDF
paramsWA_hist <- paramsOptim
paramsWA_histAll <- paramsOptim
# Substitute growth slope from historical data
paramsWA_hist$growth.slope <- fixef(pastMod)[2]
paramsWA_histAll$growth.slope <- fixef(pastModAll)[2]
paramsWA_hist$growth.sd <- fixef(pastMod)[1]
paramsWA_histAll$growth.sd <- fixef(pastModAll)[1]
paramsOptim
paramsWA_hist
paramsWA_histAll
##### RUN IPMS #####
# Will use larger size range for IPM because
# it is otherwise artificially truncated
min.size <- 0.02
max.size <- 2
binSize <- 0.02
binN <- (max.size - min.size)/binSize
binN
# Basic IPM, paramsOptim
ipm0 <- bigmatrix(n = binN, params = paramsOptim)
res0 <- popF(ipm0, binSize)
res0$max99
# Basic IPM, paramsWA_hist (historical growth slope, truncated)
ipm1 <- bigmatrix(n = binN, params = paramsWA_hist)
res1 <- popF(ipm1, binSize)
res1$max99
# Basic IPM, paramsWA_histAll (historical growth slope, all data)
ipm2 <- bigmatrix(n = binN, params = paramsWA_histAll)
res2 <- popF(ipm2, binSize)
res2$max99
wa_pred_max <- res0$max99
present_max <- res0$max99
past_max <- res1$max99
past_max - present_max
(past_max - present_max)/present_max
dat <- read.csv("./data/bael_growthData.csv", header=TRUE, na.strings="NA")
# Metabolic theory
######################################
### Constants ###
k <- 0.0000862 # boltzmann constant (metabolic theory)
E <- 0.65 #activation energy for development rate = 0.65. E for PLD (1/dev) = -0.65
# rate = a * e ^ (-E / k*T) # after Forster 2011
# a = constant (species specific; need to solve for this for each parameter)
# E = activation energy
# k = boltzmann constant
# T = temp in Kelvin
# Higher Ea is analogous to higher Q10
# From Dell 2011 PNAS
# Ea = 0.2eV is small (Q10 = 1.27 - 1.31)
# Ea = 0.55-0.65 is median and mean, respectively (Q10 = 1.95 - 2.65)
# Ea = 1.2 eV is large (Q10 = 4.33 - 6.05)
# solve for a
# a = R/ (exp(-Eo/kT))
########################################################
# general Arrhenius function for a rate
# if the rate is a positive function of temperature, choose dir = "pos", if negative, choose dir = "neg"
ArrF <- function(coef_a, E, k, temp, dir) {
if (dir == "neg") {
newRate <- coef_a * exp(E/(k* temp))}
if (dir == "pos") {
newRate <- coef_a * exp(-E/(k* temp))}
if (dir != "neg" & dir != "pos") {
print("Direction of response (dir) must be positive (pos) or negative (neg)") } else {
return(newRate)
}
}
# general function to calculate the coefficient a for a given set of parameters
# if the rate is a positive function of temperature, choose dir = "pos", if negative, choose dir = "neg"
aCoef <- function(rate, E, k, temp, dir) {
if (dir == "neg") {
a_rate <- rate / (exp(E/(k * temp)))}
if (dir == "pos") {
a_rate <- rate / (exp(-E/(k * temp)))}
if (dir != "neg" & dir != "pos") {
print("Direction of response (dir) must be positive (pos) or negative (neg)") } else {
return(a_rate)
}
}
################################################
#################################################
# Author: Robin Elahi
# Date: 151207
# FUNCTION TO GET TEMPERATURE-MODIFIED PREDICTIONS
# OF VITAL RATES BASED ON THE ARRHENIUS EQUATION
#################################################
##### DESCRIPTION OF FUNCTION #####
### This function takes eleven arguments
# slope = the slope of the vital rate in question
# intercept = the intercept of the vital rate
# slopeTempEffect = the hypothesized effect of a temperature increase
# on the slope (takes "pos" or "neg" as arguments)
# interceptTempEffect = the hypothesized effect of a temperature increase on the slope
# on the intercept (takes "pos" or "neg" as arguments)
# lowerEa = minimum activation energy
# upperEa = maximum activation energy
# Ea_increment = incremental steps of Ea
# lowerTemp = minimum temperature
# upperTemp = maximum temperature
# temp_increment = incremental steps of temperature
# originalTemp = the original temperature at which the vital rate was measured
##### FUNCTION #####
modifyVitalRates <- function(slope, slopeTempEffect,
intercept, interceptTempEffect,
lowerEa, upperEa, Ea_increment,
lowerTemp, upperTemp, temp_increment,
originalTemp) {
# SET UP VECTOR OF ACTIVATION ENERGIES
vec_Ea <- seq(lowerEa, upperEa, by = Ea_increment)
# SET UP VECTOR OF TEMPERATURE
vec_temp <- seq(lowerTemp, upperTemp, by = temp_increment)
# EXPAND THE EaDF BY TEMP GRID
grid1 <- expand.grid(vec_temp, vec_Ea)
names(grid1) <- c("Kelvin", "Ea")
grid1$row <- seq(from = 1, to = dim(grid1)[1], by = 1)
# Get pre-expontial coefficient, a, for each Ea FOR INTERCEPT
grid1$intA <- aCoef(intercept, E = grid1$Ea, k, temp = originalTemp,
dir = interceptTempEffect)
# Get pre-expontial coefficient, a, for each Ea FOR SLOPE
grid1$slopeA <- aCoef(slope, E = grid1$Ea, k, temp = originalTemp,
dir = slopeTempEffect)
# Calculate intercepts as a function of temp and Ea
grid1$vec_int <- ArrF(coef_a = grid1$intA, E = grid1$Ea, k,
temp = grid1$Kelvin, dir = interceptTempEffect)
# Calculate slopes as a function of temp and Ea
grid1$vec_slope <- ArrF(coef_a = grid1$slopeA, E = grid1$Ea, k,
temp = grid1$Kelvin, dir = slopeTempEffect)
# Add in columns for constant intercepts and slopes
grid1$const_int <- rep(intercept, length = nrow(grid1))
grid1$const_slope <- rep(slope, length = nrow(grid1))
return(grid1)
}
k <- 0.0000862 # boltzmann constant (metabolic theory)
E <- 0.65 #activation energy for development rate = 0.65. E for PLD (1/dev) = -0.65
library(ggplot2)
eq <- function(x){x*x}
ggplot(data.frame(x = c(1,50)), aes(x = x)) +
stat_function(fun = eq, geom = "line")
plot(eq(1:1000), type = "l")
eq(1:1000)
curve(eq, from = 1, to = 50)
eqArr <- function(coef_a, E, k, temp) {
newRate <- coef_a * exp(E/(k * temp))}
source("./bael_growth.R")
presMod
pastMod
# Rename relevant model
growthMod <- presMod
growthMod <- presMod
summary(growthMod)
head(datSCpresent)
datSCpresent %>%
ggplot(aes(ini.area, fin.area)) +
geom_point()
geom_point() + geom_smooth(method = "lm")
datSCpresent %>%
ggplot(aes(ini.area, fin.area)) +
geom_point() + geom_smooth(method = "lm")
datSCpresent %>%
ggplot(aes(ini.area, fin.area)) +
geom_point() + geom_smooth(method = "lm") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed")
datSCpresent %>%
ggplot(aes(ini.area, delta)) +
geom_point() + geom_smooth(method = "lm") +
geom_hline(yintercept = 0, linetype = "dashed")
head(datSCpresent)
params <- data.frame(
surv.int=NA,			# Intercept from logistic regression of survival
surv.slope=NA,	# Slope from logistic regression of survival
mature.size=NA,  # Size at maturity
embryo.int=NA,			# Intercept from linear regression of embryo number
embryo.slope=NA,		# Slope from linear regression of embryo number
embryo.sd=NA,   # Residual sd from the linear regression of embryo number
recruit.size.mean=NA, # Mean recruit size
recruit.size.sd=NA,   # Standard deviation of recruit size
estab.prob.mean=NA, # Mean of establishment probability
estab.prob.sd=NA,      # SD of establishment probability
growth.int=NA,  	# Intercept from linear regression of growth
growth.slope=NA,	# Slope from linear regression of growth
growth.sd=NA		# Residual sd from the linear regression of growth
)
params$growth.int <- summary(growthMod)[[10]][1]
params$growth.slope <- summary(growthMod)[[10]][2]
params$growth.sd <- sd(resid(growthMod))
datSCpresent %>%
summarise(growth_mean = mean(delta, na.rm = TRUE),
growth_sd = mean(delta, na.rm = TRUE))
datSCpresent %>%
summarise(growth_mean = mean(delta, na.rm = TRUE),
growth_sd = sd(delta, na.rm = TRUE))
growth_mean = mean(datSCpresent$delta, na.rm = TRUE)
source("bael_temperature.R")
modTemp <- as.numeric(sc_meanTemp_pres) + 273.15
growth_mean
modTemp
modTemp
E <- 0.65 # activation energy
k <- 0.0000862 # boltzmann constant
growth_mean # mean change in surface area over 3 years
modTemp
get_a <- function(rate, E, k, temp) {
a_rate <- rate / (exp(E/(k * temp)))}
get_a <- function(rate, E, k, temp) {
rate / (exp(E/(k * temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_new_rate <- function(coef_a, E, k, temp) {
newRate <- coef_a * exp(E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
temp_seq
get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(E/(k * temp))}
get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
qplot(temp_seq, growth_seq)
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
sc_meanTemp_pres
get_a <- function(rate, E, k, temp) {
rate / (exp(-E/(k * temp)))}
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
rate / (exp(E/(k * temp)))}
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
get_a <- function(rate, E, k, temp) {
rate * (exp(E/(k * temp)))}
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
get_a <- function(rate, E, k, temp) {
rate * (exp(E/(k * temp)))}
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
rate * (exp(E/(k * temp)))}
get_a <- function(rate, E, k, temp) {
rate / (exp(E/(k * temp)))}
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
growth_seq
growth_seq; temp_seq
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(-E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
growth_seq; temp_seq
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
E
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(-E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
growth_seq; temp_seq
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
get_a <- function(rate, E, k, temp) {
exp(ln(rate)) + exp(E / k * temp)}
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
exp(log(rate)) + exp(E / k * temp)}
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
coef_growth
log(growth_mean)
exp(-2)
exp(.6 / k * modTemp)
exp(E)
E / k * modTemp
exp(2129456)
get_a <- function(rate, E, k, temp) {
rate / (exp(E/(k * temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
rate / (exp(E/(k * temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
rate * (exp(E/(k * temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
k * modTemp
.65/.02
exp(32)
exp(32) * growth_mean
growth_mean
get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
(exp(E/(k * rate))) / k}
get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
(exp((-E/(k * rate)))) / k}
get_a(rate = growth_mean, E, k, temp = modTemp)
get_a <- function(rate, E, k, temp) {
rate * (exp((E/k*temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
modTemp
growth_mean
modTemp
get_a <- function(rate, E, k, temp) {
rate * (exp(E/(k * temp)))
}
get_a(rate = growth_mean, E, k, temp = modTemp)
exp((E/k*temp))
get_a <- function(rate, E, k, temp) {
rate + exp((E / k * temp))}
get_a(rate = growth_mean, E, k, temp = modTemp)
growth_mean
E
k * modTemp
.65/.024
exp(27)
log(exp())
exp(1)
get_a <- function(rate, E, k, temp) {
rate / (exp(E/(k * temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
growth_seq; temp_seq
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
# My solution
get_a <- function(rate, E, k, temp) {
rate / (-exp(E/(k * temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
get_a(rate = growth_mean, E, k, temp = modTemp)
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
growth_seq; temp_seq
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
eq <- function(c, a, x){
c * exp(a * x)
}
c
c1
a1
c1 = 2
a1 = 0.5
curve(eq, from = 1, to = 50)
x_seq <- seq(1, 50, 1)
y_seq <- eq(c1, a1, x1 = x_seq)
c1 = 2
a1 = 0.5
x_seq <- seq(1, 50, 1)
y_seq <- eq(c1, a1, x1 = x_seq)
eq <- function(c1, a1, x1){
c1 * exp(a1 * x1)
}
curve(eq, from = 1, to = 50)
x_seq <- seq(1, 50, 1)
y_seq <- eq(c1, a1, x1 = x_seq)
y_seq
qplot(x_seq, y_seq)
qplot(x_seq, y_seq, geom = "line")
x_seq <- seq(1, 25)
y_seq <- eq(c1, a1, x1 = x_seq)
qplot(x_seq, y_seq, geom = "line")
a1 = 0.1
curve(eq, from = 1, to = 50)
x_seq <- seq(1, 25)
y_seq <- eq(c1, a1, x1 = x_seq)
qplot(x_seq, y_seq, geom = "line")
curve(eq, from = 1, to = 50)
x_seq <- seq(0, 25)
y_seq <- eq(c1, a1, x1 = x_seq)
qplot(x_seq, y_seq, geom = "line")
a1 = -0.1
x_seq <- seq(0, 25)
y_seq <- eq(c1, a1, x1 = x_seq)
qplot(x_seq, y_seq, geom = "line")
a1 = -0.1
a2 = 0.1
y_seq2 <- eq(c1, a2, x1 = x_seq)
xydf <- data.frame(x_seq, y_seq, y_seq2)
xydf
library(tidyr)
?gather
xydfL <- gather(xydf, key = sequence, value = y, y_seq:y_seq2)
xydfL %>%
ggplot(aes(x_seq, y, color = sequence)) +
geom_line()
xydfL
get_a <- function(rate, E, k, temp) {
rate / (exp(-E/(k * temp)))}
get_a(rate = growth_mean, E, k, temp = modTemp)
aCoef <- function(rate, E, k, temp, dir) {
if (dir == "neg") {
a_rate <- rate / (exp(E/(k * temp)))}
if (dir == "pos") {
a_rate <- rate / (exp(-E/(k * temp)))}
if (dir != "neg" & dir != "pos") {
print("Direction of response (dir) must be positive (pos) or negative (neg)") } else {
return(a_rate)
}
}
aCoef(rate = growth_mean, E, k, temp = modTemp, dir = "pos")
coef_growth <- get_a(rate = growth_mean, E, k, temp = modTemp)
coef_growth
get_new_rate <- function(coef_a, E, k, temp) {
coef_a * exp(-E/(k * temp))}
temp_seq <- seq(modTemp + 5, modTemp -5)
growth_seq <- get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
growth_seq; temp_seq
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
get_a <- function(rate, E, k, temp) {
rate / (exp(-E/(k * temp)))
}
get_a(rate = growth_mean, E, k, temp = modTemp)
get_a(rate = growth_mean, E, k, temp = modTemp)
aCoef(rate = growth_mean, E, k, temp = modTemp, dir = "pos")
growth_seq
growth_seq <- ArrF(coef_a = coef_growth, E, k, temp = temp_seq, dir = "pos")
growth_seq; temp_seq
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
growth_seq; temp_seq
qplot(temp_seq, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
modTemp <- as.numeric(sc_meanTemp_pres) + 273.15
##### PLOT EXPONENTIAL FUNCTION #####
qplot(temp_seq - 273.15, growth_seq) +
geom_hline(yintercept = growth_mean, color = 'red')
qplot(temp_seq - 273.15, growth_seq, geom = "line") +
geom_hline(yintercept = growth_mean, color = 'red')
qplot(temp_seq - 273.15, growth_seq, geom = c("line", "point")) +
geom_hline(yintercept = growth_mean, color = 'red')
qplot(temp_seq - 273.15, growth_seq, geom = c("line", "point")) +
geom_hline(yintercept = growth_mean, color = 'red') +
labs(x = "Growth (cm2 per 3 years)", y = "Temperature (C)")
theme_set(theme_bw(size = 12))
qplot(temp_seq - 273.15, growth_seq, geom = c("line", "point")) +
geom_hline(yintercept = growth_mean, color = 'red') +
labs(x = "Growth (cm2 per 3 years)", y = "Temperature (C)")
theme_set(theme_bw())
qplot(temp_seq - 273.15, growth_seq, geom = c("line", "point")) +
geom_hline(yintercept = growth_mean, color = 'red') +
labs(x = "Growth (cm2 per 3 years)", y = "Temperature (C)")
temp_seq <- seq(modTemp + 2, modTemp -2, by = 0.1)
?seq
temp_seq <- seq(modTemp + 2, modTemp - 2, by = 0.1)
temp_seq <- seq(modTemp + 2, modTemp - 2, length.out = 20)
get_new_rate(coef_a = coef_growth, E, k, temp = temp_seq)
ArrF(coef_a = coef_growth, E, k, temp = temp_seq, dir = "pos")
growth_seq <- ArrF(coef_a = coef_growth, E, k, temp = temp_seq, dir = "pos")
growth_seq; temp_seq
theme_set(theme_bw())
qplot(temp_seq - 273.15, growth_seq, geom = c("line", "point")) +
geom_hline(yintercept = growth_mean, color = 'red') +
labs(x = "Growth (cm2 per 3 years)", y = "Temperature (C)")
theme_set(theme_bw())
qplot(temp_seq - 273.15, growth_seq, geom = c("line", "point")) +
geom_hline(yintercept = growth_mean, color = 'red') +
labs(y = "Growth (cm2 per 3 years)", x = "Temperature (C)")
c
Dv = 2 * 10^-9
W = seq(0.01, 0.45, by = 0.01) # vector of organism's characteristic dimension
d
U
mu
c1 = 2 # constant
Dv = 2 * 10^-9 # diffusion coefficient of O2 in water
W = seq(0.01, 0.45, by = 0.01) # vector of organism's characteristic dimension
d = 0.5 # flow size exponent; here I just use 0.5 to represent mass transfer in laminar flow
rho = 998.4 # fluid density
U = 0.4 # water velocity; constant at 0.4 ms-1
mu = 0.001 # dynamic viscosity of water
dat <- data.frame(c1, Dv, W, d, rho, U, mu)
head(dat)
dat <- dat %>%
mutate(hm = (c1 * Dv * W^(d - 1) * rho^d * U^d) / mu^d)
library(dplyr)
dat <- dat %>%
mutate(hm = (c1 * Dv * W^(d - 1) * rho^d * U^d) / mu^d)
plot(W, hm, data = data)
dat
plot(W, hm, data = dat)
?plot
plot(hm ~ W, data = dat, type = "l")
dat <- dat %>%
mutate(hm = (c1 * Dv * W^(0.8 - 1) * rho^d * U^d) / mu^d)
plot(hm ~ W, data = dat, type = "l")
plot(hm ~ W, data = dat, type = "b")
