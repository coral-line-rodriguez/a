ylab = "No. of recruits at time t + 1")
plot(jitter(recruit.prop) ~ eq, las=1,
xlab = "Estimated no. of embryos per quadrat at time t",
ylab = "Recruitment success (%) at time t + 1")
plot(recruit.prop ~ eq)
plot(recruit.prop ~ dq)
estabProp <- as.data.frame(recruit.prop)
estabProp
establishment.prob <- as.data.frame(recruit.prop)
head(establishment.prob)
names(dat)
# Select the relevant columns
d <- dat[, which(names(dat) %in% c("quad", "date", "date.no",
"coral.id", "area", "feret", "code", "sizeOK", "surv", "growth", "recruit"))]
# Get data at time 3
unique(d$date.no)
dT03 <- droplevels(d[d$date.no == 39426 | d$date.no == 40515, ])
summary(dT03)
dT0 <- droplevels(dT03[dT03$date.no == 39426, ])
dT3 <- droplevels(dT03[dT03$date.no == 40515, ])
summary(dT3)
head(d)
summary(d)
recruitDat <- d[d$recruit == 1,]
dim(recruitDat)
summary(recruitDat)
# 52 total recruits over the 3 year period
recruit.size.mean <- mean(recruitDat$area)
recruit.size.sd <- sd(recruitDat$area)
### Now do this for recruits at the end of T3 ONLY
head(recruitDat)
# Compare recruitDat with data for T3
head(dT3)
dim(dT3)
# create dataframe with code coral.id for recruitDat
recruitDat2 <- droplevels(recruitDat[, which(names(recruitDat) %in%
c("coral.id", "code"))])
dim(recruitDat2)
names(recruitDat2) <- c("coral.id", "recruitCode")
head(recruitDat2)
summary(recruitDat2)
dT3b <- merge(dT3, recruitDat2, all.x = TRUE)
summary(dT3b) # 52 recruits, and 30 had died
# how many of the 52 recruits were still alive at T3?
dT3c <- droplevels(dT3b[dT3b$recruitCode == "recruit", ]) # doesn't work?
dT3c <- droplevels(dT3b[dT3b$code == "dead" &
dT3b$recruitCode == "recruit", ]) # also doesn't work?
dT3c <- droplevels(dT3b[dT3b$code == "dead", ]) # works
dim(dT3c)
summary(dT3c) # so of the 30 that died, 3 were recruits
head(dT3c)
# after 3 years 49/52 recruits survived
# Get the size distribution of these 49 recruits in time 3
names(dT3b)
dT3d <- droplevels(dT3b[complete.cases(dT3b$recruitCode), ])
dim(dT3d)
summary(dT3d)
# Have to drop those covered by algae, at an angle, or dead guys
dT3e <- droplevels(dT3d[dT3d$code != "algae" &
dT3d$code != "angle" &
dT3d$code != "dead",  ])
summary(dT3e)
hist(dT3e$area)
#corals bigger than 0.3
dT3e[dT3e$area > 0.2, ]
recruit.size.mean2 <- mean(dT3e$area)
recruit.size.sd2 <- sd(dT3e$area)
# sum of embryos from 2007 - 2010
eqSum
# the total # of embryos per quadrat in 2007, multiplied by 3
eqMult3
# Now I need the total number of recruits per quadrat at T3
# Calculate recruit density in T3
recruit.qT3 <- tapply(dT3b$recruitCode, list(dT3$quad, dT3$date.no), FUN=recruitF)
names(adultDens2) <- c("dens07", "dens08", "dens09", "dens10")
adultDens3 <- adultDens2
recruitDensT3 <- as.numeric(recruit.qT3)/quadArea
str(recruitDensT3)
adultDens3$recruitDens <- recruitDensT3
adultDens3
ggplot(adultDens3, aes(dens07, recruitDens)) +
geom_point() + geom_smooth(method = "lm")
# plot density over time for 2007-2010
densDF <- melt(adultDens2, measure.vars = c("dens07", "dens08", "dens09", "dens10"), value.name = "density")
densDF$year <- c(rep(2007, 24), rep(2008, 24), rep(2009, 24), rep(2010, 24))
densDF <- melt(adultDens2, measure.vars = c("dens07", "dens08", "dens09", "dens10"), value.name = "density")
library(reshape2)
densDF <- melt(adultDens2, measure.vars = c("dens07", "dens08", "dens09", "dens10"),
value.name = "density")
densDF$year <- c(rep(2007, 24), rep(2008, 24), rep(2009, 24), rep(2010, 24))
densDF
eq; eqSum
sum(eqSum > 0)
# based on 1 years worth of embryos
recProb1 <- (recruit.qT3/(eq[, 1]))*100
recProb1
recProb1[is.infinite(recProb1)] <- NaN
recProb1
# based on sum of 3 years worth of embryos
recProbSum <- (recruit.qT3/eqSum) * 100;
recProbSum
recProb2 <- recProbSum
recProb2[is.infinite(recProb2)] <- NaN
recProb2
# based on year1 multipled by 3
eq[, 1] * 3
recProbMult <- (recruit.qT3/(eq[,1]*3))*100
recProbMult
recProb3 <- recProbMult
recProb3[is.infinite(recProb3)] <- NaN
recProb3
# compare to annual probabilities
mean(recProb1, na.rm = TRUE) #
sd(recProb1, na.rm = TRUE) #
mean(recProb2, na.rm = TRUE) #
sd(recProb2, na.rm = TRUE) #
mean(recProb3, na.rm = TRUE) #
sd(recProb3, na.rm = TRUE) #
plot(recProbSum ~ recProbMult)
set_graph_pars(ptype = "panel2")
hist(recProb1, breaks = 15, las=1, xlab = "Recruitment success (%)", main = NULL)
stockRecDat <- cbind(eq[, 1], recruit.qT3, recProb2)
srDat <- as.data.frame(stockRecDat)
names(srDat) <- c("embryos", "recruits", "recProb2")
srDat
# Stock-recruitment regressions
sr1 <- lm(recruits ~ embryos, data = srDat)
sr2 <- lm(recProb2 ~ embryos, data = srDat)
# using # of embryos from 2007 - 2010
# plot
set_graph_pars(ptype = "panel2")
plot(jitter(recruits) ~ embryos, las=1,
xlab = "Estimated no. of embryos\nper quadrat 2007-2009",
ylab = "No. of recruits in 2010", data = srDat)
abline(sr1, col = "black", lwd=2)
source("./R/graphicalParams.R")
stockRecDat <- cbind(eq[, 1], recruit.qT3, recProb2)
srDat <- as.data.frame(stockRecDat)
names(srDat) <- c("embryos", "recruits", "recProb2")
srDat
# Stock-recruitment regressions
sr1 <- lm(recruits ~ embryos, data = srDat)
sr2 <- lm(recProb2 ~ embryos, data = srDat)
# using # of embryos from 2007 - 2010
# plot
set_graph_pars(ptype = "panel2")
plot(jitter(recruits) ~ embryos, las=1,
xlab = "Estimated no. of embryos\nper quadrat 2007-2009",
ylab = "No. of recruits in 2010", data = srDat)
abline(sr1, col = "black", lwd=2)
plot(jitter(recProb2) ~ embryos, las=1,
xlab = "Estimated no. of embryos\nper quadrat (2007-2010)",
ylab = "Recruitment success (%) in 2010", data = srDat)
abline(sr2, col = "black", lwd=2)
recProb2
hist(recProb2)
sd(recProb2/100, na.rm = TRUE)
rm(list=ls(all=TRUE))
##### SET UP DATAFRAME TO STORE MODEL PARAMETERS #####
params <- data.frame(
surv.int=NA,			# Intercept from logistic regression of survival
surv.slope=NA,	# Slope from logistic regression of survival
mature.size=NA,  # Size at maturity
embryo.int=NA,			# Intercept from linear regression of embryo number
embryo.slope=NA,		# Slope from linear regression of embryo number
embryo.sd=NA,   # Residual sd from the linear regression of embryo number
recruit.size.mean=NA, # Mean recruit size
recruit.size.sd=NA,   # Standard deviation of recruit size
estab.prob.mean=NA, # Mean of establishment probability
estab.prob.sd=NA,      # SD of establishment probability
growth.int=NA,  	# Intercept from linear regression of growth
growth.slope=NA,	# Slope from linear regression of growth
growth.sd=NA		# Residual sd from the linear regression of growth
)
##### SURVIVAL FUNCTION #####
source("./bael_survival.R")
# These are the relevant outputs
presMod
pastMod
# Rename relevant model
survMod <- presMod
# Store vital rate parameters
params$surv.int <- summary(survMod)[[10]][1]
params$surv.slope <- summary(survMod)[[10]][2]
params
##### GROWTH FUNCTION #####
source("./bael_growth.R")
# These are the relevant outputs
presMod
pastMod
# Rename relevant model
growthMod <- presMod
# Store vital rate parameters
params$growth.int <- summary(growthMod)[[10]][1]
params$growth.slope <- summary(growthMod)[[10]][2]
params$growth.sd <- sd(resid(growthMod))
params
##### ESTABLISHMENT PROBABILITY #####
source("./bael_recruitment.R")
params$estab.prob.mean <- mean(recProb2/100, na.rm = TRUE)
rm(list=ls(all=TRUE))
##### SET UP DATAFRAME TO STORE MODEL PARAMETERS #####
params <- data.frame(
surv.int=NA,			# Intercept from logistic regression of survival
surv.slope=NA,	# Slope from logistic regression of survival
mature.size=NA,  # Size at maturity
embryo.int=NA,			# Intercept from linear regression of embryo number
embryo.slope=NA,		# Slope from linear regression of embryo number
embryo.sd=NA,   # Residual sd from the linear regression of embryo number
recruit.size.mean=NA, # Mean recruit size
recruit.size.sd=NA,   # Standard deviation of recruit size
estab.prob.mean=NA, # Mean of establishment probability
estab.prob.sd=NA,      # SD of establishment probability
growth.int=NA,  	# Intercept from linear regression of growth
growth.slope=NA,	# Slope from linear regression of growth
growth.sd=NA		# Residual sd from the linear regression of growth
)
##### SURVIVAL FUNCTION #####
source("./bael_survival.R")
# These are the relevant outputs
presMod
pastMod
# Rename relevant model
survMod <- presMod
# Store vital rate parameters
params$surv.int <- summary(survMod)[[10]][1]
params$surv.slope <- summary(survMod)[[10]][2]
params
##### GROWTH FUNCTION #####
source("./bael_growth.R")
# These are the relevant outputs
presMod
pastMod
# Rename relevant model
growthMod <- presMod
# Store vital rate parameters
params$growth.int <- summary(growthMod)[[10]][1]
params$growth.slope <- summary(growthMod)[[10]][2]
params$growth.sd <- sd(resid(growthMod))
params
##### ESTABLISHMENT PROBABILITY #####
source("./bael_recruitment.R")
params$estab.prob.mean <- mean(recProb2/100, na.rm = TRUE)
params$estab.prob.sd <- sd(recProb2/100, na.rm = TRUE)
params$recruit.size.mean <- recruit.size.mean2
params$recruit.size.sd <- recruit.size.sd2
params
paramsWA <- params
paramsCA <- params
##### EMBRYO FUNCTION #####
# Note that the embryo function determines size at maturity
source("./bael_embryos.R")
# These are the relevant outputs
mxRegWA
mxRegCA
# Store vital rate parameters for California
paramsCA$embryo.int <- coefficients(mxRegCA)[1]
paramsCA$embryo.slope <- coefficients(mxRegCA)[2]
paramsCA$embryo.sd <- sd(resid(mxRegCA))
# Store vital rate parameters for Washington
paramsWA$embryo.int <- coefficients(mxRegWA)[1]
paramsWA$embryo.slope <- coefficients(mxRegWA)[2]
paramsWA$embryo.sd <- sd(resid(mxRegWA))
paramsCA
paramsWA
##### SIZE AT MATURITY #####
paramsCA$mature.size <- -paramsCA$embryo.int/paramsCA$embryo.slope
paramsWA$mature.size <- -paramsWA$embryo.int/paramsCA$embryo.slope
paramsCA
paramsWA
library(lme4)
library(ggplot2)
library(AICcmodavg)
#rm(list=ls(all=TRUE)) # removes all previous material from R's memory
source("./R/graphicalParams.R")
dat <- read.csv("./data/bael_recruitSizeData.csv", header=TRUE, na.strings="NA")
datPast <- dat[dat$time == "past", ]
datPres <- dat[dat$time == "present", ]
mean(datPast$area)
sd(datPast$area)
mean(datPres$area)
sd(datPres$area)
paramsWA
source("./recruitSize.R")
source("./bael_recruitSize.R")
datPres
mean(datPres$area)
sd(datPres$area)
params
rm(list=ls(all=TRUE))
library(reshape2)
library(dplyr)
dat <- read.csv("./data/bael_ipmData.csv", header=TRUE, na.strings="NA")
source("./bael_embryos.R") # this also loads bael_functions
source("./R/graphicalParams.R")
dat$embryo.no <- embryoFwa(dat$area)
density.q <- tapply(dat$area, list(dat$quad, dat$date.no), FUN=densityF)
density.q
embryo.q <- tapply(dat$embryo.no, list(dat$quad, dat$date.no), FUN=sum, na.rm=TRUE)
embryo.q
eq <- embryo.q[,-4]
eqSum <- rowSums(eq)
eqMult3 <- 3*eq[, 1] # 3 years worth of embryos
eqMult2 <- 2*eq[, 1] # 2 years worth of embryos
eqMult1 <- eq[, 1] # 1 years worth of embryos 2007
plot(eqSum ~ eqMult3)
abline(a = 0, b = 1, col = "red")
recruitDat <- d[d$recruit == 1,]
d <- dat[, which(names(dat) %in% c("quad", "date", "date.no",
"coral.id", "area", "feret", "code", "sizeOK", "surv", "growth", "recruit"))]
# Get data at time 3
unique(d$date.no)
dT03 <- droplevels(d[d$date.no == 39426 | d$date.no == 40515, ])
summary(dT03)
dT0 <- droplevels(dT03[dT03$date.no == 39426, ])
dT3 <- droplevels(dT03[dT03$date.no == 40515, ])
recruitDat <- d[d$recruit == 1,]
recruitDat <- d[d$recruit == 1,]
# create dataframe with code coral.id for recruitDat
recruitDat2 <- droplevels(recruitDat[, which(names(recruitDat) %in%
c("coral.id", "code"))])
dim(recruitDat2)
names(recruitDat2) <- c("coral.id", "recruitCode")
head(recruitDat2)
summary(recruitDat2)
dT3b <- merge(dT3, recruitDat2, all.x = TRUE)
eqSum
# the total # of embryos per quadrat in 2007, multiplied by 3
eqMult3
# Now I need the total number of recruits per quadrat at T3
# Calculate recruit density in T3
recruit.qT3 <- tapply(dT3b$recruitCode, list(dT3$quad, dT3$date.no), FUN=recruitF)
names(adultDens2) <- c("dens07", "dens08", "dens09", "dens10")
recProb1 <- (recruit.qT3/(eq[, 1]))*100
recProb1
recProb1
recProb1[is.infinite(recProb1)] <- NaN
recProb1
# based on sum of 3 years worth of embryos
recProbSum <- (recruit.qT3/eqSum) * 100;
recProbSum
recProb2 <- recProbSum
recProb2[is.infinite(recProb2)] <- NaN
recruit.qT3 <- tapply(dT3b$recruitCode, list(dT3$quad, dT3$date.no), FUN=recruitF)
recruit.qT3
rm(list=ls(all=TRUE))
# rm(list=ls(all=TRUE))
##### LOAD PACKAGES, DATA #####
library(reshape2)
library(dplyr)
dat <- read.csv("./data/bael_ipmData.csv", header=TRUE, na.strings="NA")
source("./bael_embryos.R") # this also loads bael_functions
source("./R/graphicalParams.R")
# Need to calculate establishment probability
# 1. Calculate the # of embryos produced in quadrat x in time 0
# 2. Calculate the # of recruits that survived to time 3
# 3. Establishment probability = # of living recruits/ # of embryos in T0
##### CALCULATE NUMBER OF EMBRYOS PRODUCED IN EACH QUADRAT #####
# Use embryo function for washington
dat$embryo.no <- embryoFwa(dat$area)
# Calculate density for each quadrat and year
density.q <- tapply(dat$area, list(dat$quad, dat$date.no), FUN=densityF)
density.q
### Calculate number of embryos for each quadrat and year
embryo.q <- tapply(dat$embryo.no, list(dat$quad, dat$date.no), FUN=sum, na.rm=TRUE)
colnames(embryo.q) <- c("2007", "2008", "2009", "2010")
# remove the last column, because the embryo no. in 2010 is irrelevant
eq <- embryo.q[,-4]
eqSum <- rowSums(eq)
eqMult3 <- 3*eq[, 1] # 3 years worth of embryos
eqMult2 <- 2*eq[, 1] # 2 years worth of embryos
eqMult1 <- eq[, 1] # 1 years worth of embryos 2007
plot(eqSum ~ eqMult3)
abline(a = 0, b = 1, col = "red")
##### CALCULATE NUMBER OF RECRUITS THAT SURVIVED TO TIME 3 (2010) #####
names(dat)
# Select the relevant columns
d <- dat[, which(names(dat) %in% c("quad", "date", "date.no",
"coral.id", "area", "feret", "code", "sizeOK", "surv", "growth", "recruit"))]
# Get data at time 3
unique(d$date.no)
dT03 <- droplevels(d[d$date.no == 39426 | d$date.no == 40515, ])
summary(dT03)
dT0 <- droplevels(dT03[dT03$date.no == 39426, ])
dT3 <- droplevels(dT03[dT03$date.no == 40515, ])
recruitDat <- d[d$recruit == 1,]
# create dataframe with code coral.id for recruitDat
recruitDat2 <- droplevels(recruitDat[, which(names(recruitDat) %in%
c("coral.id", "code"))])
dim(recruitDat2)
names(recruitDat2) <- c("coral.id", "recruitCode")
head(recruitDat2)
summary(recruitDat2)
dT3b <- merge(dT3, recruitDat2, all.x = TRUE)
# sum of embryos from 2007 - 2010
eqSum
# the total # of embryos per quadrat in 2007, multiplied by 3
eqMult3
# Now I need the total number of recruits per quadrat at T3
# Calculate recruit density in T3
recruit.qT3 <- tapply(dT3b$recruitCode, list(dT3$quad, dT3$date.no), FUN=recruitF)
recruit.qT3
# based on 1 years worth of embryos
recProb1 <- (recruit.qT3/(eq[, 1]))*100
recProb1[is.infinite(recProb1)] <- NaN
recProb1
# based on sum of 3 years worth of embryos
recProbSum <- (recruit.qT3/eqSum) * 100;
recProb2 <- recProbSum
recProb2[is.infinite(recProb2)] <- NaN
recProb2
# based on year1 multipled by 3
eq[, 1] * 3
recProbMult <- (recruit.qT3/(eq[,1]*3))*100
recProb3 <- recProbMult
recProb3[is.infinite(recProb3)] <- NaN
recProb3
recProb2
params$estab.prob.mean <- mean(recProb2/100, na.rm = TRUE)
mean(recProb2/100, na.rm = TRUE)
sd(recProb2/100, na.rm = TRUE)
eqSum
plot(eqSum ~ eqMult3)
abline(a = 0, b = 1, col = "red")
#################################################
# Author: Robin Elahi
# Date: 151209
# Parameters for IPM
#################################################
rm(list=ls(all=TRUE))
##### SET UP DATAFRAME TO STORE MODEL PARAMETERS #####
params <- data.frame(
surv.int=NA,			# Intercept from logistic regression of survival
surv.slope=NA,	# Slope from logistic regression of survival
mature.size=NA,  # Size at maturity
embryo.int=NA,			# Intercept from linear regression of embryo number
embryo.slope=NA,		# Slope from linear regression of embryo number
embryo.sd=NA,   # Residual sd from the linear regression of embryo number
recruit.size.mean=NA, # Mean recruit size
recruit.size.sd=NA,   # Standard deviation of recruit size
estab.prob.mean=NA, # Mean of establishment probability
estab.prob.sd=NA,      # SD of establishment probability
growth.int=NA,  	# Intercept from linear regression of growth
growth.slope=NA,	# Slope from linear regression of growth
growth.sd=NA		# Residual sd from the linear regression of growth
)
##### SURVIVAL FUNCTION #####
source("./bael_survival.R")
# These are the relevant outputs
presMod
pastMod
# Rename relevant model
survMod <- presMod
# Store vital rate parameters
params$surv.int <- summary(survMod)[[10]][1]
params$surv.slope <- summary(survMod)[[10]][2]
params
##### GROWTH FUNCTION #####
source("./bael_growth.R")
# These are the relevant outputs
presMod
pastMod
# Rename relevant model
growthMod <- presMod
# Store vital rate parameters
params$growth.int <- summary(growthMod)[[10]][1]
params$growth.slope <- summary(growthMod)[[10]][2]
params$growth.sd <- sd(resid(growthMod))
params
##### ESTABLISHMENT PROBABILITY #####
source("./bael_establishment.R")
# establishment probability - using the sum of three years of embryos
params$estab.prob.mean <- mean(recProb2/100, na.rm = TRUE)
params$estab.prob.sd <- sd(recProb2/100, na.rm = TRUE)
params
##### SIZE DISTRIBUTION OF RECRUITS #####
dat <- read.csv("./data/bael_recruitSizeData.csv", header=TRUE, na.strings="NA")
datPres <- dat[dat$time == "present", ]
# Store vital rate parameters
params$recruit.size.mean <- mean(datPres$area)
params$recruit.size.sd <- sd(datPres$area)
params
##### CREATE FORK FOR CALIFORNIA AND WASHINGTON #####
# The embryo function is originally from California,
# and was modified using the Arrhenius equation for Washington,
# which has colder seawater
# The modified embryo-size function causes downstream changes to
# size at maturity
paramsWA <- params
paramsCA <- params
##### EMBRYO FUNCTION #####
# Note that the embryo function determines size at maturity
source("./bael_embryos.R")
# These are the relevant outputs
mxRegWA
mxRegCA
# Store vital rate parameters for California
paramsCA$embryo.int <- coefficients(mxRegCA)[1]
paramsCA$embryo.slope <- coefficients(mxRegCA)[2]
paramsCA$embryo.sd <- sd(resid(mxRegCA))
# Store vital rate parameters for Washington
paramsWA$embryo.int <- coefficients(mxRegWA)[1]
paramsWA$embryo.slope <- coefficients(mxRegWA)[2]
paramsWA$embryo.sd <- sd(resid(mxRegWA))
paramsCA
paramsWA
##### SIZE AT MATURITY #####
paramsCA$mature.size <- -paramsCA$embryo.int/paramsCA$embryo.slope
paramsWA$mature.size <- -paramsWA$embryo.int/paramsCA$embryo.slope
##### COMPLETE DATAFRAME #####
paramsCA
paramsWA
