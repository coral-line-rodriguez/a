ipm_out <- result <- vector("list", N)
res_out <- result <- vector("list", N)
# Dataframe to store Ea and the log-likelihood of the size distribution (ssd2) to the observed size-frequency distribution
# Use same bin sizes and range as IPM
histBreaks <- seq(min.size, max.size, binSize)
areaH_07 <- hist(hist10$area, breaks = histBreaks)
areaH_10 <- hist(hist10$area, breaks = histBreaks)
areaH_0710 <- hist(hist0710$area, breaks = histBreaks)
dns07 <- areaH_07$density
dns10 <- areaH_10$density
dns0710 <- areaH_0710$density
data_out <- data.frame(Ea = data_in$Ea,
LL07 = NA,
LL10 = NA,
LL0710 = NA)
# Initialize parameter dataframe
paramDF <- paramsWA # the cells will be modified in the loop
for (i in 1:N){
# Create new paramDF, with modified fecundity parameters
params.i <- data_in[i, ]
paramDF$estab.prob.mean <- params.i$estab.prob.mean
paramDF$estab.prob.sd <- params.i$estab.prob.sd
paramDF$embryo.int <- params.i$embryo.int
paramDF$mature.size <- params.i$mature.size
# Now run IPM
ipm1 <- bigmatrix(n = binN, params = paramDF)
res1 <- popF(ipm1, binSize)
# Store log likelihood results in data_out
Ea.i <- as.character(params.i$Ea)
LL07.i <- - sum(dns07 * log(res1$ssd2))
LL10.i <- - sum(dns10 * log(res1$ssd2))
LL0710.i <- - sum(dns0710 * log(res1$ssd2))
data_out[i, ] <- c(Ea.i, LL07.i, LL10.i, LL0710.i)
# Store IPM results in lists
ipm_out[[i]] <- ipm1
res_out[[i]] <- res1
}
head(data_out)
str(ipm_out[[1]])
str(res_out[[1]])
##### IPMs for WA and CA #####
### Base IPM, original parameters
ipm1 <- bigmatrix(n = binN, params = paramsWA)
res1 <- popF(ipm1, binSize)
res1[1:8]
### Modified IPM, with modified embryo and recruitment parameters
ipm2 <- bigmatrix(n = binN, params = paramsCA)
res2 <- popF(ipm2, binSize)
res2
##### CALCULATE LL #####
# Use 2010 data
area.h <- hist(hist0710$area, breaks = seq(0.02, 1.5, 0.02))
area.h
cnt <- area.h$counts
dns <- area.h$density
sum(cnt)
sum(dns); length(dns)
sum(dns * 0.05)
# using density
mod1LL <- - sum(dns * log(res1$ssd2)); mod1LL # LL for empirical data is -1.2
plot(mx.coral ~ areaR, data = ltDat, xlim = c(0, 1.5), ylim = c(-0.025, 40),
xlab = xlab2, ylab = "Embryo number", las = 1, type = "n")
##### PLOTTING #####
pdf("./figs/ipm_histo_fit.pdf", 7, 3.5)
set_graph_pars(ptype = "panel2")
xlab2 <- expression(paste("Size (", cm^2, ")"))
#### Panel A ####
plot(mx.coral ~ areaR, data = ltDat, xlim = c(0, 1.5), ylim = c(-0.025, 40),
xlab = xlab2, ylab = "Embryo number", las = 1, type = "n")
add_panel_label(ltype = "a")
abline(mxRegCA, lwd=2, lty=1)
abline(a = 0, b = 0, lty=3, lwd=2, col="darkgray")
points(mx.coral ~ areaR, data = ltDat)
curve(slopeCA * x + data_in$embryo.int[medianEa_position],
from = 0, to = 1.5, add = TRUE,
col = "darkgray", lwd = 2)
add_panel_label(ltype = "a")
legend("bottomright", "n = 12", cex = 1.1, bty = "n", adj = c(0,-2))
leg.txt <- c("Original", "Modified")
legend("topleft", leg.txt, lwd = 2, bty = "n",
col = c("black", "darkgray"), lty = 1,
cex = 1, text.col = c("black", "darkgray"))
#### Panel B ####
quantile(hist0710$area, probs = c(0.95, 0.99, 1))
obs99 <- quantile(hist0710$area, probs = 0.99)
hist(hist0710$area, breaks = seq(0.0, 1.5, 0.05), freq = FALSE,
xlab = xlab2, ylab="Probability density", col = "gray87", main = "",
ylim = c(-0.025, 2), xlim = c(0, 1.4), border = "gray90", las = 1)
box()
# California parameters
points(ipm2$meshpts , res2$ssd2, type="l", lty=1, lwd = 2,
col = "black")
# Optimized Ea
points(ipm_out[[medianEa_position]]$meshpts ,
res_out[[medianEa_position]]$ssd2, type="l", lty=1, lwd = 2,
col = "darkgray")
arrows(res2$max99, 0.4, res2$max99, 0.13, col = "black",
length = 0.1, lwd = 1.5, angle = 20, lty = 1)
arrows(res_out[[medianEa_position]]$max99, 0.4,
res_out[[medianEa_position]]$max99, 0.13, col = "darkgray",
length = 0.1, lwd = 1.5, angle = 20, lty = 1)
add_panel_label(ltype = "b")
legend("topright", leg.txt, lwd = 2, bty = "n",
col = c("black", "darkgray"), lty = 1,
cex = 1, text.col = c("black", "darkgray"))
dev.off()
ipm3 <- bigmatrix(n = binN, params = paramsOptim)
res3 <- popF(ipm3, binSize)
res3[[1:3]]
res3[1:4]
paramsOptim
ipm3 <- bigmatrix(n = binN, params = paramsOptim)
res3 <- popF(ipm3, binSize)
res3[1:4]
summary(pastMod)
summary(pastModAll)
summary(presMod)
# Create params DF with modified growth function
# Summary of modeled parameters
summary(pastMod)
summary(pastModAll)
summary(presMod)
# Fitted coefficients of general linear model
fixef(pastMod)
fixef(pastModAll)
# Create new paramsDF
paramsWA_hist <- paramsOptim
paramsWA_histAll <- paramsOptim
# Substitute growth slope from historical data
paramsWA_hist$growth.slope <- fixef(pastMod)[2]
paramsWA_histAll$growth.slope <- fixef(pastModAll)[2]
paramsWA_hist$growth.sd <- fixef(pastMod)[1]
paramsWA_histAll$growth.sd <- fixef(pastModAll)[1]
paramsWA_hist
paramsWA_histAll
paramsOptim
paramsWA_hist
paramsWA_histAll
# it is otherwise artificially truncated
min.size <- 0.02
max.size <- 2
binSize <- 0.02
binN <- (max.size - min.size)/binSize
binN
# Basic IPM, paramsOptim
ipm0 <- bigmatrix(n = binN, params = paramsOptim)
res0 <- popF(ipm0, binSize)
res0$max99
# Basic IPM, paramsWA_hist (historical growth slope, truncated)
ipm1 <- bigmatrix(n = binN, params = paramsWA_hist)
res1 <- popF(ipm1, binSize)
res1$max99
# Basic IPM, paramsWA_histAll (historical growth slope, all data)
ipm2 <- bigmatrix(n = binN, params = paramsWA_histAll)
res2 <- popF(ipm2, binSize)
res2$max99
library(smatr)
library(ggplot2)
theme_set(theme_classic(base_size = 12))
source("./R/graphicalParams.R")
dat <- read.csv("./data/bael_CN_2015.csv")
dat
# change biomass from g to mg
biomass_mg <- dat$biomass * 1000
dat$biomass <- biomass_mg
# change surface area from cm2 to mm2
dat$mm <- dat$area * 100
dat$massLN <- log(dat$biomass)
dat$areaLN <- log(dat$area)
dat$mmLN <- log(dat$mm)
summary(dat)
##### Untransformed plot, OLS regression for prediction #####
head(dat)
dat$category <- rep("Empirical")
# Regression
ols1 <- lm(biomass ~ area, data = dat)
summary(ols1)
ols1$coefficients
##### OBSERVED MAXIMUM SIZE: PRESENT #####
# Size frequencies in 2007 + 2010
source("R/get_histo_ipm_data.R")
sizeSummary_modern <- hist0710 %>%
summarise(maxSize = max(area),
max99 = quantile(area, 0.99),
max95 = quantile(area, 0.95),
median = median(area),
n = length(area))
##### OBSERVED MAXIMUM SIZE: PAST #####
# Size frequences in 1969 + 1972
# Past size data in histoData.csv:
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
# Initial data
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
# Final data
fin.dat <- droplevels(dat[dat$fin.notes != "angle" & dat$fin.notes != "fuzzy" &
dat$fin.notes != "gone" & dat$fin.notes != "nv" &
dat$fin.notes != "tentacles" &
dat$fin.notes != "algae" &
dat$fin.notes != "dead" &
dat$fin.notes != "overgrown", ])
fin.dat <- droplevels(fin.dat[complete.cases(fin.dat$fin.area), ]) # drop NAs
ini.sc <- subset(ini.dat, site=="SC")
fin.sc <- subset(fin.dat, site == "SC")
# Combine past and present SC data
iniDF <- ini.sc %>% select(time, ini.area) %>% rename(area = ini.area)
finDF <- fin.sc %>% select(time, fin.area) %>% rename(area = fin.area)
histDF <- rbind(iniDF, finDF)
histDF %>% group_by(time) %>%
summarise(maxSize = max(area),
max99 = quantile(area, 0.99),
max95 = quantile(area, 0.95),
median = median(area),
n = length(area))
sizeSummary_historic <- histDF %>% filter(time == "past") %>%
summarise(maxSize = max(area),
max99 = quantile(area, 0.99),
max95 = quantile(area, 0.95),
median = median(area),
n = length(area))
sizeObs <- rbind(sizeSummary_modern, sizeSummary_historic)
sizeObs$tempC <- c(modTemp-273.15, hisTemp-273.15)
sizeObs$era <- c("present", "past")
sizeObs
sizeObs
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
# Initial data
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
# Final data
fin.dat <- droplevels(dat[dat$fin.notes != "angle" & dat$fin.notes != "fuzzy" &
dat$fin.notes != "gone" & dat$fin.notes != "nv" &
dat$fin.notes != "tentacles" &
dat$fin.notes != "algae" &
dat$fin.notes != "dead" &
dat$fin.notes != "overgrown", ])
fin.dat <- droplevels(fin.dat[complete.cases(fin.dat$fin.area), ]) # drop NAs
ini.sc <- subset(ini.dat, site=="SC")
fin.sc <- subset(fin.dat, site == "SC")
# Combine past and present SC data
iniDF <- ini.sc %>% select(time, ini.area) %>% rename(area = ini.area)
finDF <- fin.sc %>% select(time, fin.area) %>% rename(area = fin.area)
ini.sc
head(ini.sc)
ini.sc %>% select(time, ini.area)
ini.sc %>% select(time, ini.area) %>% rename(area = ini.area)
iniDF <- ini.sc %>% select(time, ini.area) %>% rename(area = ini.area)
iniDF <- ini.sc %>% select(time, ini.area) %>% rename(., area = ini.area)
source("R/get_histo_ipm_data.R")
sizeSummary_modern <- hist0710 %>%
summarise(maxSize = max(area),
max99 = quantile(area, 0.99),
max95 = quantile(area, 0.95),
median = median(area),
n = length(area))
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
# Initial data
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
# Final data
fin.dat <- droplevels(dat[dat$fin.notes != "angle" & dat$fin.notes != "fuzzy" &
dat$fin.notes != "gone" & dat$fin.notes != "nv" &
dat$fin.notes != "tentacles" &
dat$fin.notes != "algae" &
dat$fin.notes != "dead" &
dat$fin.notes != "overgrown", ])
fin.dat <- droplevels(fin.dat[complete.cases(fin.dat$fin.area), ]) # drop NAs
ini.sc <- subset(ini.dat, site=="SC")
fin.sc <- subset(fin.dat, site == "SC")
# Combine past and present SC data
iniDF <- ini.sc %>% select(time, ini.area) %>% rename(area = ini.area)
ini.sc
head(ini.sc)
library(dplyr)
iniDF <- ini.sc %>% select(time, ini.area) %>% rename(area = ini.area)
iniDF <- ini.sc %>% select(time, ini.area)
iniDF
head(iniDF)
str(iniDF)
dplyr::rename(iniDF, area = ini.area)
dplyr::rename(iniDF, area = ini.area)
iniDF <- ini.sc %>% select(time, ini.area) %>% dplyr::rename(area = ini.area)
finDF <- fin.sc %>% select(time, fin.area) %>% dplyr::rename(area = fin.area)
histDF <- rbind(iniDF, finDF)
histDF %>% group_by(time) %>%
summarise(maxSize = max(area),
max99 = quantile(area, 0.99),
max95 = quantile(area, 0.95),
median = median(area),
n = length(area))
sizeSummary_historic <- histDF %>% filter(time == "past") %>%
summarise(maxSize = max(area),
max99 = quantile(area, 0.99),
max95 = quantile(area, 0.95),
median = median(area),
n = length(area))
sizeObs <- rbind(sizeSummary_modern, sizeSummary_historic)
sizeObs$tempC <- c(modTemp-273.15, hisTemp-273.15)
sizeObs$era <- c("present", "past")
sizeObs
area_given <- c(1, 1.67)
# predicted biomass for 99% max sizes (0.91, 1.44)
area_given <- c(0.91, 1.47)
predict_biomass <- function(area) {
(area * ols1$coefficients[2] +
ols1$coefficients[1])
}
biomass_pred <- predict_biomass(area_given)
biomass_pred
# create dataframe for predicted biomass
predBiomass <- as.data.frame(cbind(area_given, biomass_pred))
predBiomass$era <- c("modern", "historic")
# Calculate percent change per degree
predBiomass
mass_Mod <- predBiomass$biomass_pred[1]
mass_Hist <- predBiomass$biomass_pred[2]
perChangeMass <- (mass_Hist - mass_Mod)/(mass_Hist) * 100
perChangeMass
biomass_pred <- predict_biomass(area_given)
biomass_pred
# create dataframe for predicted biomass
predBiomass <- as.data.frame(cbind(area_given, biomass_pred))
predBiomass$era <- c("modern", "historic")
# Calculate percent change per degree
predBiomass
mass_Mod <- predBiomass$biomass_pred[1]
mass_Hist <- predBiomass$biomass_pred[2]
perChangeMass <- (mass_Hist - mass_Mod)/(mass_Hist) * 100
perChangeMass
tempSizeResponse <- perChangeMass/0.65
part1 <- paste(round(tempSizeResponse, 1),
"% change in mass per", sep = "")
part1
text1 <- expression(paste("65% reduction in mass per", degree, "C"))
text1
label1 <- expression(paste("Surface area (", cm^2, ")"))
label2 <- "Biomass (mg)"
ggplot(data = dat, aes(area, biomass)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = "black") +
xlab(label1) + ylab(label2) +
scale_x_continuous(limits = c(0, 1.5)) +
scale_y_continuous(limits = c(0, 140)) +
geom_point(data = predBiomass,
aes(area_given, biomass_pred,
color = era, shape = era)) +
scale_color_manual(values = c("darkgray", "black")) +
scale_shape_manual(values = c(18, 20)) +
theme(legend.position = "none")
dat <- read.csv("./data/bael_CN_2015.csv")
dat
# change biomass from g to mg
biomass_mg <- dat$biomass * 1000
dat$biomass <- biomass_mg
# change surface area from cm2 to mm2
dat$mm <- dat$area * 100
dat$massLN <- log(dat$biomass)
dat$areaLN <- log(dat$area)
dat$mmLN <- log(dat$mm)
summary(dat)
##### Untransformed plot, OLS regression for prediction #####
head(dat)
dat$category <- rep("Empirical")
# Regression
ols1 <- lm(biomass ~ area, data = dat)
summary(ols1)
ols1$coefficients
# predicted biomass for largest corals 1.00 cm2, and 1.67 cm2
area_given <- c(1, 1.67)
# predicted biomass for 99% max sizes (0.91, 1.44)
area_given <- c(0.91, 1.47)
predict_biomass <- function(area) {
(area * ols1$coefficients[2] +
ols1$coefficients[1])
}
biomass_pred <- predict_biomass(area_given)
biomass_pred
# create dataframe for predicted biomass
predBiomass <- as.data.frame(cbind(area_given, biomass_pred))
predBiomass$era <- c("modern", "historic")
# Calculate percent change per degree
predBiomass
mass_Mod <- predBiomass$biomass_pred[1]
mass_Hist <- predBiomass$biomass_pred[2]
perChangeMass <- (mass_Hist - mass_Mod)/(mass_Hist) * 100
perChangeMass
# Temperature has increased by 0.65 C
# Normalize to one degree change to match Forster 2012
tempSizeResponse <- perChangeMass/0.65
part1 <- paste(round(tempSizeResponse, 1),
"% change in mass per", sep = "")
part1
text1 <- expression(paste("65% reduction in mass per", degree, "C"))
text1
label1 <- expression(paste("Surface area (", cm^2, ")"))
label2 <- "Biomass (mg)"
ggplot(data = dat, aes(area, biomass)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = "black") +
xlab(label1) + ylab(label2) +
scale_x_continuous(limits = c(0, 1.5)) +
scale_y_continuous(limits = c(0, 140)) +
geom_point(data = predBiomass,
aes(area_given, biomass_pred,
color = era, shape = era)) +
scale_color_manual(values = c("darkgray", "black")) +
scale_shape_manual(values = c(18, 20)) +
theme(legend.position = "none")
head(dat)
dat$category <- rep("Empirical")
# Regression
ols1 <- lm(massLN ~ mmLN, data = dat)
summary(ols1)
ols1$coefficients
# predicted biomass for 1.00 cm2, and 1.67 cm2
area_given <- log(c(1, 1.67) * 100)
# predicted biomass for 99% max sizes (0.91, 1.44)
area_given <- log(c(0.91, 1.47) * 100)
area_given
predict_biomass <- function(area) {
(area * ols1$coefficients[2] +
ols1$coefficients[1])
}
biomass_predLN <- predict_biomass(area_given)
biomass_predLN
biomass_pred <- exp(biomass_predLN)
biomass_pred
# create dataframe for predicted biomass
predBiomass <- as.data.frame(cbind(area_given, biomass_predLN, biomass_pred))
predBiomass$era <- c("modern", "historic")
# Calculate percent change per degree
predBiomass
mass_Mod <- predBiomass$biomass_pred[1]
mass_Hist <- predBiomass$biomass_pred[2]
perChangeMass <- (mass_Hist - mass_Mod)/(mass_Hist) * 100
perChangeMass
# Temperature has increased by 0.65 C
# Normalize to one degree change to match Forster 2012
tempSizeResponse <- perChangeMass/0.65
tempSizeResponse
part1 <- paste(round(tempSizeResponse, 1),
"% change in mass per", sep = "")
part1
text1 <- expression(paste("65% reduction in mass per", degree, "C"))
text1
label1 <- expression(paste("Surface area [", log(mm^2), "]"))
label2 <- "Biomass [ln(mg)]"
ggplot(data = dat, aes(mmLN, massLN)) +
geom_point(shape = 1, size = 2) +
geom_smooth(method = "lm", color = "black") +
xlab(label1) + ylab(label2) +
geom_point(data = predBiomass,
aes(area_given, biomass_predLN,
color = era, shape = era), size = 2.5) +
scale_color_manual(values = c("darkgray", "black")) +
scale_shape_manual(values = c(18, 20)) +
theme(legend.position = "none") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed")
tempSizeResponse
# rm(list=ls(all=TRUE)) # removes all previous material from R's memory
##### LOAD PACKAGES ETC #####
source("bael_IPM_fecundityTest.R")
# Create params DF with modified growth function
# Summary of modeled parameters
summary(pastMod)
summary(pastModAll)
summary(presMod)
# Fitted coefficients of general linear model
fixef(pastMod)
fixef(pastModAll)
# Create new paramsDF
paramsWA_hist <- paramsOptim
paramsWA_histAll <- paramsOptim
# Substitute growth slope from historical data
paramsWA_hist$growth.slope <- fixef(pastMod)[2]
paramsWA_histAll$growth.slope <- fixef(pastModAll)[2]
paramsWA_hist$growth.sd <- fixef(pastMod)[1]
paramsWA_histAll$growth.sd <- fixef(pastModAll)[1]
paramsOptim
paramsWA_hist
paramsWA_histAll
##### RUN IPMS #####
# Will use larger size range for IPM because
# it is otherwise artificially truncated
min.size <- 0.02
max.size <- 2
binSize <- 0.02
binN <- (max.size - min.size)/binSize
binN
# Basic IPM, paramsOptim
ipm0 <- bigmatrix(n = binN, params = paramsOptim)
res0 <- popF(ipm0, binSize)
res0$max99
# Basic IPM, paramsWA_hist (historical growth slope, truncated)
ipm1 <- bigmatrix(n = binN, params = paramsWA_hist)
res1 <- popF(ipm1, binSize)
res1$max99
# Basic IPM, paramsWA_histAll (historical growth slope, all data)
ipm2 <- bigmatrix(n = binN, params = paramsWA_histAll)
res2 <- popF(ipm2, binSize)
res2$max99
wa_pred_max <- res0$max99
present_max <- res0$max99
past_max <- res1$max99
past_max - present_max
(past_max - present_max)/present_max
