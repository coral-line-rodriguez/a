# ltDat$areaRcorr <- ltDat$areaR + sizeDiff
# mxRegWA <- lm(mx.coral ~ areaRcorr, data = ltDat[ltDat$Vol.mid > 75, ])
### PART 2: ESTIMATE NEW RECRUITMENT PROBABILITY
# Calculate the number of embryos produced by each coral
dat$embryos <- ifelse(dat$area < xIntWA, 0,
dat$area * slopeCA + yIntWA)
# Remove 2010 data, and then get total number of embryos per quad
quad_embryosDF <- dat %>% filter(date.no != 40515) %>%
group_by(quad) %>%
summarise(quadEmbryos = sum(embryos, na.rm = TRUE))
# These are the observed recruits every year
recruitDat <- dat %>% filter(recruit ==1) %>% select(coral.id, code) %>%
rename(recruitCode = code)
head(recruitDat)
quad_recruitsDF <- dat %>% filter(date.no == 40515) %>%
left_join(., recruitDat, by = "coral.id") %>%
group_by(quad) %>%
summarise(quadRecruits = recruitF(recruitCode))
# Join embryos with recruits, then calculate establishment probability
quad_DF <- inner_join(quad_recruitsDF, quad_embryosDF) %>%
mutate(recProb = quadRecruits/quadEmbryos * 100)
quad_DF$recProb[is.infinite(quad_DF$recProb)] <- NaN
quad_DF
estabDF <- quad_DF %>% summarise(estab.prob.mean = mean(recProb, na.rm = TRUE),
estab.prob.sd = sd(recProb, na.rm = TRUE))
return(estabDF)
}
paramsCA
paramsWA
get_fecundity_params <- function(E, k, kelvin) {
### PART 1: ESTIMATE NEW EMBRYO-SIZE RELATIONSHIP
# Calculate new y-intercept and x-intercept (size at maturity)
yIntWA <- ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
xIntWA <- -yIntWA/slopeCA
# # Estimate new regression between size and embryos
# sizeDiff <- xIntWA - xIntCA
# ltDat$areaRcorr <- ltDat$areaR + sizeDiff
# mxRegWA <- lm(mx.coral ~ areaRcorr, data = ltDat[ltDat$Vol.mid > 75, ])
### PART 2: ESTIMATE NEW RECRUITMENT PROBABILITY
# Calculate the number of embryos produced by each coral
dat$embryos <- ifelse(dat$area < xIntWA, 0,
dat$area * slopeCA + yIntWA)
# Remove 2010 data, and then get total number of embryos per quad
quad_embryosDF <- dat %>% filter(date.no != 40515) %>%
group_by(quad) %>%
summarise(quadEmbryos = sum(embryos, na.rm = TRUE))
# These are the observed recruits every year
recruitDat <- dat %>% filter(recruit ==1) %>% select(coral.id, code) %>%
rename(recruitCode = code)
head(recruitDat)
quad_recruitsDF <- dat %>% filter(date.no == 40515) %>%
left_join(., recruitDat, by = "coral.id") %>%
group_by(quad) %>%
summarise(quadRecruits = recruitF(recruitCode))
# Join embryos with recruits, then calculate establishment probability
quad_DF <- inner_join(quad_recruitsDF, quad_embryosDF) %>%
mutate(recProb = quadRecruits/quadEmbryos * 100)
quad_DF$recProb[is.infinite(quad_DF$recProb)] <- NaN
quad_DF
estabDF <- quad_DF %>% summarise(estab.prob.mean = mean(recProb, na.rm = TRUE),
estab.prob.sd = sd(recProb, na.rm = TRUE))
return(estabDF)
}
get_fecundity_params(E = E, k = k, kelvin = kelvin_WA)
get_fecundity_params(E = E, k = k, kelvin = kelvin_CA)
estabDF
kelvin_WA
get_fecundity_params(E = E, k = k, kelvin = 290)
get_fecundity_params(E = E, k = k, kelvin = 200)
get_fecundity_params(E = E, k = k, kelvin = 230)
get_fecundity_params(E = E, k = k, kelvin = 260)
get_fecundity_params(E = E, k = k, kelvin = 270)
get_fecundity_params(E = E, k = k, kelvin = 280)
get_fecundity_params(E = E, k = k, kelvin = 270)
get_fecundity_params(E = E, k = k, kelvin = 275)
get_fecundity_params(E = E, k = k, kelvin = 278)
get_fecundity_params(E = E, k = k, kelvin = 280)
get_fecundity_params(E = E, k = k, kelvin = 300)
get_fecundity_params(E = E, k = k, kelvin = 340)
estabDF
estabDF$embryo.int <- yIntWA
estabDF$mature.size <- xIntWA
return(estabDF)
View(estabDF)
get_fecundity_params <- function(E, k, kelvin) {
### PART 1: ESTIMATE NEW EMBRYO-SIZE RELATIONSHIP
# Calculate new y-intercept and x-intercept (size at maturity)
yIntWA <- ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
xIntWA <- -yIntWA/slopeCA
# # Estimate new regression between size and embryos
# sizeDiff <- xIntWA - xIntCA
# ltDat$areaRcorr <- ltDat$areaR + sizeDiff
# mxRegWA <- lm(mx.coral ~ areaRcorr, data = ltDat[ltDat$Vol.mid > 75, ])
### PART 2: ESTIMATE NEW RECRUITMENT PROBABILITY
# Calculate the number of embryos produced by each coral
dat$embryos <- ifelse(dat$area < xIntWA, 0,
dat$area * slopeCA + yIntWA)
# Remove 2010 data, and then get total number of embryos per quad
quad_embryosDF <- dat %>% filter(date.no != 40515) %>%
group_by(quad) %>%
summarise(quadEmbryos = sum(embryos, na.rm = TRUE))
# These are the observed recruits every year
recruitDat <- dat %>% filter(recruit ==1) %>% select(coral.id, code) %>%
rename(recruitCode = code)
head(recruitDat)
quad_recruitsDF <- dat %>% filter(date.no == 40515) %>%
left_join(., recruitDat, by = "coral.id") %>%
group_by(quad) %>%
summarise(quadRecruits = recruitF(recruitCode))
# Join embryos with recruits, then calculate establishment probability
quad_DF <- inner_join(quad_recruitsDF, quad_embryosDF) %>%
mutate(recProb = quadRecruits/quadEmbryos * 100)
quad_DF$recProb[is.infinite(quad_DF$recProb)] <- NaN
quad_DF
estabDF <- quad_DF %>% summarise(estab.prob.mean = mean(recProb, na.rm = TRUE),
estab.prob.sd = sd(recProb, na.rm = TRUE))
estabDF$embryo.int <- yIntWA
estabDF$mature.size <- xIntWA
return(estabDF)
}
get_fecundity_params(E = E, k = k, kelvin = 340)
get_fecundity_params(E = E, k = k, kelvin = 300)
get_fecundity_params(E = E, k = k, kelvin = 290)
get_fecundity_params(E = E, k = k, kelvin = 298)
kelvin_WA
get_fecundity_params(E = E, k = k, kelvin = 280)
get_fecundity_params(E = E, k = k, kelvin = 275)
get_fecundity_params(E = E, k = k, kelvin = 272)
get_fecundity_params(E = E, k = k, kelvin = 273)
get_fecundity_params(E = E, k = k, kelvin = 274)
get_fecundity_params(E = E, k = k, kelvin = kelvin_CA)
kelvin = kelvin_CA
yIntWA <- ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
xIntWA <- -yIntWA/slopeCA
yIntWA
xintwa
xIntWA
yIntCA
xIntCA
embryoInterceptsDF$sizeDiff <- xIntWA - xIntCA
vector_Ea <- seq(0.635, 0.67, by = 0.0005)
loopDat <- data.frame(Ea = vector_Ea, yIntWA = NA, xIntWA = NA)
loopDat
for (i in 1:length(vector_Ea)) {
E.i <- loopDat[i, ]$Ea
yIntWA.i <- ArrF(embryo_A, E = E.i, k,
temp = kelvin_WA, dir = "neg")
xIntWA.i <- get_x_int_WA(y_intercept_CA, E = E.i, k,
newKelvin = kelvin_WA)
loopDat[i, ]$yIntWA <- as.numeric(yIntWA.i)
loopDat[i, ]$xIntWA <- as.numeric(xIntWA.i)
}
get_x_int_WA <- function(rate, E, k, newKelvin) {
# Get y-intercept for WA
y_intercept_WA <- ArrF(embryo_A, E, k, temp = newKelvin, dir = "neg")
# Calculate x-intercept for WA
xIntWA <- -y_intercept_WA/mxReg$coefficients[2]
return(xIntWA)
}
get_x_int_WA(y_intercept_CA, E, k, newKelvin = kelvin_WA)
# We assume that size at maturity will be larger in the colder Washington population
# If we use an Ea = 0.65 (mean), then we get a size of ~ 0.4 cm2
# Can we explore a range of activation energies, because we don't know the sensitivity of this function to temperature?
vector_Ea <- seq(0.635, 0.67, by = 0.0005)
loopDat <- data.frame(Ea = vector_Ea, yIntWA = NA, xIntWA = NA)
loopDat
for (i in 1:length(vector_Ea)) {
E.i <- loopDat[i, ]$Ea
yIntWA.i <- ArrF(embryo_A, E = E.i, k,
temp = kelvin_WA, dir = "neg")
xIntWA.i <- get_x_int_WA(y_intercept_CA, E = E.i, k,
newKelvin = kelvin_WA)
loopDat[i, ]$yIntWA <- as.numeric(yIntWA.i)
loopDat[i, ]$xIntWA <- as.numeric(xIntWA.i)
}
embryoInterceptsDF <- loopDat
head(embryoInterceptsDF)
embryoInterceptsDF$sizeDiff <- xIntWA - xIntCA
ltDat$areaRcorr <- ltDat$areaR + sizeDiff
mxRegWA <- lm(mx.coral ~ areaRcorr, data = ltDat[ltDat$Vol.mid > 75, ])
mxRegCA <- lm(mx.coral ~ areaR, data = ltDat[ltDat$Vol.mid > 75, ])
sizeDiff
ltDat
mxRegCA
mxRegWA
mxRegWA
mxRegCA
##### SET UP DATAFRAME TO STORE MODEL PARAMETERS #####
params <- data.frame(
surv.int=NA,			# Intercept from logistic regression of survival
surv.slope=NA,	# Slope from logistic regression of survival
mature.size=NA,  # Size at maturity
embryo.int=NA,			# Intercept from linear regression of embryo number
embryo.slope=NA,		# Slope from linear regression of embryo number
embryo.sd=NA,   # Residual sd from the linear regression of embryo number
recruit.size.mean=NA, # Mean recruit size
recruit.size.sd=NA,   # Standard deviation of recruit size
estab.prob.mean=NA, # Mean of establishment probability
estab.prob.sd=NA,      # SD of establishment probability
growth.int=NA,  	# Intercept from linear regression of growth
growth.slope=NA,	# Slope from linear regression of growth
growth.sd=NA		# Residual sd from the linear regression of growth
)
paramsCA$embryo.int <- coefficients(mxRegCA)[1]
paramsCA$embryo.slope <- coefficients(mxRegCA)[2]
paramsCA$embryo.sd <- sd(resid(mxRegCA))
paramsWA <- params
paramsCA <- params
##### EMBRYO FUNCTION #####
# Note that the embryo function determines size at maturity and
# establishment probability
source("./bael_embryos.R")
# These are the relevant outputs
mxRegWA
mxRegCA
# Store vital rate parameters for California
paramsCA$embryo.int <- coefficients(mxRegCA)[1]
paramsCA$embryo.slope <- coefficients(mxRegCA)[2]
paramsCA$embryo.sd <- sd(resid(mxRegCA))
# Store vital rate parameters for Washington
paramsWA$embryo.int <- coefficients(mxRegWA)[1]
paramsWA$embryo.slope <- coefficients(mxRegWA)[2]
paramsWA$embryo.sd <- sd(resid(mxRegWA))
paramsCA
paramsWA
##### SIZE AT MATURITY #####
paramsCA$mature.size <- -paramsCA$embryo.int/paramsCA$embryo.slope
paramsWA$mature.size <- -paramsWA$embryo.int/paramsCA$embryo.slope
paramsCA
paramsWA
get_fecundity_params(E = E, k = k, kelvin = kelvin_CA)
get_fecundity_params(E = E, k = k, kelvin = kelvin_WA)
##### ESTABLISHMENT PROBABILITY #####
source("./bael_establishment.R")
paramsWA$estab.prob.mean <- mean(recProbWA/100, na.rm = TRUE)
paramsWA$estab.prob.sd <- sd(recProbWA/100, na.rm = TRUE)
paramsCA$estab.prob.mean <- mean(recProbCA/100, na.rm = TRUE)
paramsCA$estab.prob.sd <- sd(recProbCA/100, na.rm = TRUE)
##### COMPLETE DATAFRAME #####
paramsCA
paramsWA
#################################################
# Author: Robin Elahi
# Date: 151209
# Coral establishment probability (recruitment over 3 years)
#################################################
# rm(list=ls(all=TRUE))
##### LOAD PACKAGES, DATA #####
library(reshape2)
dat <- read.csv("./data/bael_ipmData.csv", header=TRUE, na.strings="NA")
source("./bael_embryos.R") # this also loads bael_functions
source("./R/graphicalParams.R")
### Three steps to calculate establishment probability
# 1. Calculate the # of embryos produced in quadrat x over 3 years
# 2. Calculate the # of recruits that survived to time 3
# 3. Establishment probability = # of living recruits/ # of total embryos
##### CALCULATE NUMBER OF EMBRYOS PRODUCED IN EACH QUADRAT #####
# Calculate density for each quadrat and year
density.q <- tapply(dat$area, list(dat$quad, dat$date.no), FUN=densityF)
density.q
str(dat)
unique(dat$date)
# Use embryo function for Washington and California
dat$embryosWA <- embryoFwa(dat$area)
dat$embryosCA <- embryoFca(dat$area)
# Calculate the number of embryos produced by each coral
dat$embryos <- embryoF(dat$area, xIntercept = xIntWA, mxRegression = mxRegWA)
# Remove 2010 data, and then get total number of embryos per quad
quad_embryosDF <- dat %>% filter(date.no != 40515) %>%
group_by(quad) %>%
summarise(quadEmbryos = sum(embryos, na.rm = TRUE))
### Calculate number of embryos for each quadrat and year - WA
embryoWA.q <- tapply(dat$embryosWA, list(dat$quad, dat$date.no), FUN=sum, na.rm=TRUE)
colnames(embryoWA.q) <- c("2007", "2008", "2009", "2010")
# remove the last column, because the embryo no. in 2010 is irrelevant
eqWA <- embryoWA.q[,-4]
eqWASum <- rowSums(eqWA)
### Calculate number of embryos for each quadrat and year - CA
embryoCA.q <- tapply(dat$embryosCA, list(dat$quad, dat$date.no), FUN=sum, na.rm=TRUE)
colnames(embryoCA.q) <- c("2007", "2008", "2009", "2010")
# remove the last column, because the embryo no. in 2010 is irrelevant
eqCA <- embryoCA.q[,-4]
eqCASum <- rowSums(eqCA)
##### CALCULATE NUMBER OF RECRUITS THAT SURVIVED TO TIME 3 (2010) #####
# These are the observed recruits every year
recruitDat <- dat %>% filter(recruit ==1) %>% select(coral.id, code) %>%
rename(recruitCode = code)
head(recruitDat)
quad_recruitsDF <- dat %>% filter(date.no == 40515) %>%
left_join(., recruitDat, by = "coral.id") %>%
group_by(quad) %>%
summarise(quadRecruits = recruitF(recruitCode))
# Join embryos with recruits, then calculate establishment probability
quad_DF <- inner_join(quad_recruitsDF, quad_embryosDF) %>%
mutate(recProb = quadRecruits/quadEmbryos * 100)
quad_DF$recProb[is.infinite(quad_DF$recProb)] <- NaN
quad_DF
names(dat)
# Select the relevant columns
d <- dat[, which(names(dat) %in% c("quad", "date", "date.no",
"coral.id", "area", "feret", "code", "sizeOK", "surv", "growth", "recruit"))]
# Get data at time 3
unique(d$date.no)
dT03 <- droplevels(d[d$date.no == 39426 | d$date.no == 40515, ])
summary(dT03)
dT0 <- droplevels(dT03[dT03$date.no == 39426, ])
dT3 <- droplevels(dT03[dT03$date.no == 40515, ])
recruitDat <- d[d$recruit == 1,]
# create dataframe with code coral.id for recruitDat
recruitDat2 <- droplevels(recruitDat[, which(names(recruitDat) %in%
c("coral.id", "code"))])
dim(recruitDat2)
names(recruitDat2) <- c("coral.id", "recruitCode")
head(recruitDat2)
summary(recruitDat2)
dT3b <- merge(dT3, recruitDat2, all.x = TRUE)
# Calculate recruit density in T3
recruit.qT3 <- tapply(dT3b$recruitCode, list(dT3$quad, dT3$date.no), FUN=recruitF)
recruit.qT3
##### CALCULATE ESTABLISHMENT PROBABILITY AFTER 3 YEARS IN 2010 #####
# Sum the total number of embryos produced over three years
eqCASum; eqWASum
### For California (original)
recProbSum <- (recruit.qT3/eqCASum) * 100;
recProb2 <- recProbSum
recProb2[is.infinite(recProb2)] <- NaN
recProbCA <- recProb2
### For Washington (temperature-adjusted)
recProbSum <- (recruit.qT3/eqWASum) * 100;
recProb2 <- recProbSum
recProb2[is.infinite(recProb2)] <- NaN
recProb2
recProbWA <- recProb2
plot(recProbWA ~ recProbCA)
paramsWA$estab.prob.mean <- mean(recProbWA/100, na.rm = TRUE)
paramsWA$estab.prob.sd <- sd(recProbWA/100, na.rm = TRUE)
paramsCA$estab.prob.mean <- mean(recProbCA/100, na.rm = TRUE)
paramsCA$estab.prob.sd <- sd(recProbCA/100, na.rm = TRUE)
##### COMPLETE DATAFRAME #####
paramsCA
paramsWA
get_fecundity_params(E = E, k = k, kelvin = kelvin_WA)
get_fecundity_params <- function(E, k, kelvin) {
### PART 1: ESTIMATE NEW EMBRYO-SIZE RELATIONSHIP
# Calculate new y-intercept and x-intercept (size at maturity)
yIntWA <- ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
xIntWA <- -yIntWA/slopeCA
### PART 2: ESTIMATE NEW RECRUITMENT PROBABILITY
# Calculate the number of embryos produced by each coral
dat$embryos <- ifelse(dat$area < xIntWA, 0,
dat$area * slopeCA + yIntWA)
# Remove 2010 data, and then get total number of embryos per quad
quad_embryosDF <- dat %>% filter(date.no != 40515) %>%
group_by(quad) %>%
summarise(quadEmbryos = sum(embryos, na.rm = TRUE))
# These are the observed recruits every year
recruitDat <- dat %>% filter(recruit ==1) %>% select(coral.id, code) %>%
rename(recruitCode = code)
quad_recruitsDF <- dat %>% filter(date.no == 40515) %>%
left_join(., recruitDat, by = "coral.id") %>%
group_by(quad) %>%
summarise(quadRecruits = recruitF(recruitCode))
# Join embryos with recruits, then calculate establishment probability
quad_DF <- inner_join(quad_recruitsDF, quad_embryosDF) %>%
mutate(recProb = quadRecruits/quadEmbryos)
quad_DF$recProb[is.infinite(quad_DF$recProb)] <- NaN
estabDF <- quad_DF %>% summarise(estab.prob.mean = mean(recProb, na.rm = TRUE),
estab.prob.sd = sd(recProb, na.rm = TRUE))
estabDF$embryo.int <- yIntWA
estabDF$mature.size <- xIntWA
return(estabDF)
}
get_fecundity_params(E = E, k = k, kelvin = kelvin_WA)
get_fecundity_params(E = E, k = k, kelvin = kelvin_CA)
eqCASum; eqWASum
embryoF()
embryoF
dat$embryos <- ifelse(dat$area < xIntWA, 0,
dat$area * slopeCA + yIntWA)
# Remove 2010 data, and then get total number of embryos per quad
quad_embryosDF <- dat %>% filter(date.no != 40515) %>%
group_by(quad) %>%
summarise(quadEmbryos = sum(embryos, na.rm = TRUE))
# These are the observed recruits every year
recruitDat <- dat %>% filter(recruit ==1) %>% select(coral.id, code) %>%
rename(recruitCode = code)
quad_recruitsDF <- dat %>% filter(date.no == 40515) %>%
left_join(., recruitDat, by = "coral.id") %>%
group_by(quad) %>%
summarise(quadRecruits = recruitF(recruitCode))
# Join embryos with recruits, then calculate establishment probability
quad_DF <- inner_join(quad_recruitsDF, quad_embryosDF) %>%
mutate(recProb = quadRecruits/quadEmbryos)
quad_DF$recProb[is.infinite(quad_DF$recProb)] <- NaN
estabDF <- quad_DF %>% summarise(estab.prob.mean = mean(recProb, na.rm = TRUE),
estab.prob.sd = sd(recProb, na.rm = TRUE))
estabDF
yIntWA <- ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
kelvin_CA
yIntCA
slopeCA
kelvin = kelvin_CA
yIntWA <- ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
xIntWA <- -yIntWA/slopeCA
### PART 2: ESTIMATE NEW RECRUITMENT PROBABILITY
# Calculate the number of embryos produced by each coral
dat$embryos <- ifelse(dat$area < xIntWA, 0,
dat$area * slopeCA + yIntWA)
# Remove 2010 data, and then get total number of embryos per quad
quad_embryosDF <- dat %>% filter(date.no != 40515) %>%
group_by(quad) %>%
summarise(quadEmbryos = sum(embryos, na.rm = TRUE))
quad_embryosDF
# These are the observed recruits every year
recruitDat <- dat %>% filter(recruit ==1) %>% select(coral.id, code) %>%
rename(recruitCode = code)
quad_recruitsDF <- dat %>% filter(date.no == 40515) %>%
left_join(., recruitDat, by = "coral.id") %>%
group_by(quad) %>%
summarise(quadRecruits = recruitF(recruitCode))
# Join embryos with recruits, then calculate establishment probability
quad_DF <- inner_join(quad_recruitsDF, quad_embryosDF) %>%
mutate(recProb = quadRecruits/quadEmbryos)
quad_DF$recProb[is.infinite(quad_DF$recProb)] <- NaN
estabDF <- quad_DF %>% summarise(estab.prob.mean = mean(recProb, na.rm = TRUE),
estab.prob.sd = sd(recProb, na.rm = TRUE))
estabDF
estabDF <- quad_DF %>% summarise(estab.prob.mean = mean(recProb, na.rm = TRUE),
estab.prob.sd = sd(recProb, na.rm = TRUE))
estabDF$embryo.int <- yIntWA
estabDF$mature.size <- xIntWA
estabDF
quad_DF
xIntCA; yIntCA; slopeCA
ltDat
embryo_A <- aCoef(yIntCA, E, k, temp = kelvin_CA, dir = "neg")
E
k
yIntCA
embryo_A <- aCoef(yIntCA, E, k, temp = kelvin_CA, dir = "neg")
embryo_A
ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
yIntCA
yIntWA <- ArrF(embryo_A, E = E, k = k, temp = kelvin, dir = "neg")
xIntWA <- -yIntWA/slopeCA
xIntWA
xIntCA
dat$embryos <- ifelse(dat$area < xIntWA, 0,
dat$area * slopeCA + yIntWA)
vector_Ea <- seq(0.635, 0.67, by = 0.0005)
get_fecundity_params(E = E, k = k, kelvin = kelvin_CA)
vector_Ea <- seq(0.635, 0.67, by = 0.0005)
loopDat <- data.frame(Ea = vector_Ea,
estab.prob.mean = NA,
estab.prob.sd = NA,
embryo.int = NA,
mature.size = NA)
loopDat
vector_Ea <- seq(0.6, 0.8, by = 1)
loopDat <- data.frame(Ea = vector_Ea,
estab.prob.mean = NA,
estab.prob.sd = NA,
embryo.int = NA,
mature.size = NA)
loopDat
vector_Ea <- seq(0.6, 0.8, by = 0.1)
vector_Ea <- seq(0.635, 0.67, by = 0.0005)
loopDat <- data.frame(Ea = vector_Ea,
vector_Ea <- seq(0.6, 0.8, by = 0.1)
#vector_Ea <- seq(0.635, 0.67, by = 0.0005)
loopDat <- data.frame(Ea = vector_Ea,
estab.prob.mean = NA,
estab.prob.sd = NA,
embryo.int = NA,
mature.size = NA)
vector_Ea <- seq(0.6, 0.8, by = 0.1)
#vector_Ea <- seq(0.635, 0.67, by = 0.0005)
loopDat <- data.frame(Ea = vector_Ea,
estab.prob.mean = NA,
estab.prob.sd = NA,
embryo.int = NA,
mature.size = NA)
loopDat
for (i in 1:length(vector_Ea)) {
E.i <- loopDat[i, ]$Ea
estabDF.i <- get_fecundity_params(E = E.i,
k = k, kelvin = kelvin_WA)
loopDat[i, ]$Ea <- E.i
loopDat[i, ]$estab.prob.mean <- estabDF.i$estab.prob.mean
loopDat[i, ]$estab.prob.sd <- estabDF.i$estab.prob.sd
loopDat[i, ]$embryo.int <- estabDF.i$embryo.int
loopDat[i, ]$mature.size <- estabDF.i$mature.size
}
loopDat
vector_Ea <- seq(0.6, 0.67, by = 0.001)
loopDat <- data.frame(Ea = vector_Ea,
estab.prob.mean = NA,
estab.prob.sd = NA,
embryo.int = NA,
mature.size = NA)
loopDat
for (i in 1:length(vector_Ea)) {
E.i <- loopDat[i, ]$Ea
estabDF.i <- get_fecundity_params(E = E.i,
k = k, kelvin = kelvin_WA)
loopDat[i, ]$Ea <- E.i
loopDat[i, ]$estab.prob.mean <- estabDF.i$estab.prob.mean
loopDat[i, ]$estab.prob.sd <- estabDF.i$estab.prob.sd
loopDat[i, ]$embryo.int <- estabDF.i$embryo.int
loopDat[i, ]$mature.size <- estabDF.i$mature.size
}
loopDat
