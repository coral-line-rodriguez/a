REML = FALSE, data=lmerDat)
Cand.mod[[3]] <- lmer(fin.area ~ ini.area  + (1|quadOriginal),
REML = FALSE, data=lmerDat)
Cand.mod[[4]] <- lmer(fin.area ~ time + (1|quadOriginal),
REML = FALSE, data = lmerDat)
Cand.mod[[5]] <- lmer(fin.area ~ 1 + (1|quadOriginal),
REML = FALSE, data=lmerDat)
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Size", "Era + Size", "Size", "Era", "Null model")
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
globalMod <- Cand.mod[[1]]
summary(globalMod)
Cand.mod <- list()
Cand.mod[[1]] <- lmer(fin.area ~ ini.area*time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[2]] <- lmer(fin.area ~ ini.area + time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[3]] <- lmer(fin.area ~ ini.area  + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[4]] <- lmer(fin.area ~ time + (1|quad),
REML = FALSE, data = lmerDat)
Cand.mod[[5]] <- lmer(fin.area ~ 1 + (1|quad),
REML = FALSE, data=lmerDat)
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Size", "Era + Size", "Size", "Era", "Null model")
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
globalMod <- Cand.mod[[1]]
summary(globalMod)
lmerDat <- datSC
lmerDat <- datSC
Cand.mod <- list()
Cand.mod[[1]] <- lmer(fin.area ~ ini.area*time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[2]] <- lmer(fin.area ~ ini.area + time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[3]] <- lmer(fin.area ~ ini.area  + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[4]] <- lmer(fin.area ~ time + (1|quad),
REML = FALSE, data = lmerDat)
Cand.mod[[5]] <- lmer(fin.area ~ 1 + (1|quad),
REML = FALSE, data=lmerDat)
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Size", "Era + Size", "Size", "Era", "Null model")
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
globalMod <- Cand.mod[[1]]
summary(globalMod)
lmerDat <- datSCTrunc
dim(lmerDat)
names(lmerDat)
# SIZE: LINEAR
# RANDOM EFFECTS
mod1 <- lmer(fin.area ~ ini.area*time +  (1|quad),
REML = TRUE, data=lmerDat)
mod2 <- lmer(fin.area ~ ini.area*time +  (1|quadOriginal),
REML = TRUE, data=lmerDat)
AIC(mod1, mod2)
anova(mod1, mod2)
summary(mod2)
# use varying slopes by quadrat? no - doesn't add anything
mod1 <- lmer(fin.area ~ ini.area*time +  (ini.area|quad),
REML = FALSE, data=lmerDat)
summary(mod1)
mod2 <- lmer(fin.area ~ ini.area*time + (1|quad),
REML = FALSE, data=lmerDat)
summary(mod2)
AIC(mod1, mod2) # mod 1 is better; including
lm1 <- lm(fin.area ~ ini.area*time, data=lmerDat)
summary(lm1)
Cand.mod <- list()
Cand.mod[[1]] <- lmer(fin.area ~ ini.area*time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[2]] <- lmer(fin.area ~ ini.area + time + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[3]] <- lmer(fin.area ~ ini.area  + (1|quad),
REML = FALSE, data=lmerDat)
Cand.mod[[4]] <- lmer(fin.area ~ time + (1|quad),
REML = FALSE, data = lmerDat)
Cand.mod[[5]] <- lmer(fin.area ~ 1 + (1|quad),
REML = FALSE, data=lmerDat)
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Size", "Era + Size", "Size", "Era", "Null model")
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
datSCpastTrunc <- datSCpast[datSCpast$ini.area <= 0.96, ]
datSCpresent
datSCpastTrunc
presMod <- lmer(fin.area ~ ini.area + (1|quad),
REML = FALSE, data = datSCpresent)
pastMod <- lmer(fin.area ~ ini.area + (1|quad),
REML = FALSE, data = datSCpastTrunc)
summary(presMod)
summary(pastMod)
sd(resid(pastMod))
##########################################################
##########################################################
# FIGURE - GROWTH SCALING BY ERA (TRUNCATED)
##########################################################
##########################################################
ylab1 <- expression(paste("Size at time t+3 (", cm^2, ")"))
xlab1 <- expression(paste("Size at time t (", cm^2, ")"))
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 0.05, size = rel(1.2)))
theme_set(theme_classic(base_size = 12))
dim(lmerDat)
lmerDat$fitted <- fitted(globalMod)
plot(fitted ~ fin.area, data = lmerDat)
size1 <- ggplot(lmerDat, aes(ini.area, fin.area, color = time, shape = time)) +
ylab(ylab1) + xlab(xlab1) +
theme(legend.justification = c(1, 0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 4, alpha = 0.8,
position = position_jitter(h = 0.05)) +
scale_colour_manual(breaks = c("past", "present"),
values = c("darkgray", "black"),
labels = c("1969-1972", "2007-2010")) +
scale_shape_manual(breaks = c("past", "present"),
values = c(18, 20),
labels = c("1969-1972", "2007-2010"))
size1
size1 + layer(stat = "smooth", stat_params = list(method = "lm", se = FALSE, size = 10))
size1 + stat_smooth(method = "lm", se = FALSE, size = 1)
# but i want to plot the lmer output, taking into account random effects
size2 <- ggplot(lmerDat, aes(ini.area, fitted, color = time)) +
ylab("Fitted survival") + xlab(xlab1) +
theme(legend.justification = c(1, 0), legend.position = c(1, 0.2)) +
theme(legend.title = element_blank()) +
geom_point(size = 4, alpha = 1, pch = 21,
position = position_jitter(h = 0.05)) +
scale_colour_manual(breaks = c("past", "present"),
values = c("darkgray", "black"))
size2 + layer(stat = "smooth", stat_params = list(method = "lm", se = FALSE, size = 10))
size1 + geom_point(aes(y = fitted, color = time)) +
layer(stat = "smooth", stat_params = list(method = "lm", se = FALSE, size = 10))
summary(globalMod) # random effects contribute to 0 variance,
#hence the perfect overlap between GLM and GLMER
size1 + stat_smooth(method = "lm", se = TRUE, size = 2,
aes(color = NULL), linetype = 1, color = 1) +
geom_line(aes(y = fitted, color = time), size = 1, linetype = 2) +
labs(title = "B") + ULClabel +
geom_abline(a = 0, b = 1, linetype = 3)
ULClabel <- theme(plot.title = element_text(hjust = -0.15, vjust = 0, size = rel(1.2)))
sizePlot <- size1 +
geom_smooth(method = "lm", se = FALSE, size = 1) +
labs(title = "B") + ULClabel +
geom_abline(a = 0, b = 1, linetype = 2, color = "gray")
sizePlot
# Save lmerDat as different file
dat_growth <- lmerDat
head(dat)
#################################################
# DENSITY
#################################################
dat <- read.csv("./data/bael_densityMaster.csv", header=TRUE, na.strings="NA")
names(dat)
### Remove D3 because this subquadrat was not sampled after 3 years
dat2 <- dat[dat$quad != "D3", ]
### Quick plots of data at the subquadrat and quadrat scale
# Note that this analysis treats subquads as replicates, not appropriate
boxplot(densM ~ year, data = dat2)
ggplot(data = dat2, aes(as.factor(year), densM)) + geom_violin()
tail(dat2)
facet1 <- facet_wrap(~ era, scales = "free_x")
my_label <- expression(paste("Density (no. ", m^-2, ")"))
unique(dat2$quad)
ULClabel <- theme(plot.title = element_text(hjust = -0.2, vjust = 1,
size = rel(1.2)))
head(dat2)
library("grid") # needed for unit call in ggplot2
densityPlot <- ggplot(dat2, aes(x = year, y = densM, by = quad)) +
xlab("Year") + ylab(my_label) +
geom_point(size = 2, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
geom_line(size = 0.2, alpha = 0.3, aes(color = era)) + facet1 +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20)) +
theme(panel.margin = unit(1.5, "lines"))
p2 <- densityPlot + ULClabel + labs(title = "B                    Shady Cove")
p2
###########################
# Models for density
# lme4
# test whether density is different among eras
# compare 1969 with 2007 for simplicity
head(dat)
tail(dat) # use transect as a rand
lmerDat <- dat %>% filter(year == "2007" | year == "1969")
summary(lmerDat)
unique(lmerDat$quad)
with(lmerDat, table(era, quad))
head(lmerDat)
tail(dat) # use transect as a random effect,
lmerDat <- dat %>% filter(year == "2007" | year == "1969") %>%
group_by(quad1, tran, era) %>%
summarise(meanDens = mean(densM, na.rm = TRUE))
lmerDat
Cand.mod <- list()
Cand.mod[[1]] <- lmer(meanDens ~ era + (1|tran),
REML = FALSE, data = lmerDat)
Cand.mod[[2]] <- lmer(meanDens ~ 1 + (1|tran),
REML = FALSE, data = lmerDat)
#generate AICc table with names
mod_text <- c("Era", "Null model")
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, "densityAIC.csv")
write.csv(mod.aicctab, "./output/densityAIC.csv")
summary(Cand.mod[[1]])
bestMod <- Cand.mod[[1]]
par(mfrow = c(1,2))
qqnorm(resid(bestMod))
qqline(resid(bestMod))
plot(resid(bestMod) ~ fitted(bestMod)); abline(h=0)
ggplot(data = lmerDat, aes(era, meanDens)) +
geom_boxplot()
ggplot(data = lmerDat, aes(era, meanDens)) +
geom_boxplot() + geom_point()
ggplot(data = lmerDat, aes(era, meanDens)) +
geom_boxplot() + geom_point() + geom_violin
ggplot(data = lmerDat, aes(era, meanDens)) +
geom_boxplot() + geom_point() + geom_violin()
ggplot(data = lmerDat, aes(era, meanDens)) +
geom_violin() + geom_point()
meanDensData <- dat %>% filter(year == "2007" | year == "1969") %>%
group_by(quad1, tran, era) %>%
summarise(meanDens = mean(densM, na.rm = TRUE))
meanDensData
ggplot(data = lmerDat, aes(era, meanDens)) +
geom_point()
ggplot(data = lmerDat, aes(era, jitter(meanDens))) +
geom_point()
ggplot(data = meanDensData, aes(era, meanDens)) +
geom_point()
ggplot(data = meanDensData, aes(era, meanDens)) +
xlab("Year") + ylab(my_label) +
geom_point(size = 2, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none")
ggplot(data = meanDensData, aes(era, meanDens)) +
xlab("Year") + ylab(my_label) +
geom_point(size = 2, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
ggplot(data = meanDensData, aes(era, meanDens)) +
xlab("") + ylab(my_label) +
geom_point(size = 3, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
ggplot(data = meanDensData, aes(year, meanDens)) +
xlab("") + ylab(my_label) +
geom_point(size = 3, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
# need to calculate average density for historical quads
meanDensData <- dat %>% filter(year == "2007" | year == "1969") %>%
group_by(quad1, tran, era, year) %>%
summarise(meanDens = mean(densM, na.rm = TRUE))
meanDensData
ggplot(data = meanDensData, aes(year, meanDens)) +
xlab("") + ylab(my_label) +
geom_point(size = 3, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_point(size = 3, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
ggplot(data = meanDensData, aes(as.factor(year), jitter(meanDens)) +
xlab("") + ylab(my_label) +
geom_point(size = 3, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
ggplot(data = meanDensData, aes(as.factor(year), jitter(meanDens))) +
xlab("") + ylab(my_label) +
geom_point(size = 3, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
# Plot this nicely
ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 3, alpha = 0.5, aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
# Plot this nicely
ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 3, alpha = 0.5,
position = position_jitter(width = 0.1),
aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
# Plot this nicely
ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 3, alpha = 1,
position = position_jitter(width = 0.05),
aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
# Plot this nicely
ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 4, alpha = 1,
position = position_jitter(width = 0.05),
aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
meanDensPlot <- ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 4, alpha = 1,
position = position_jitter(width = 0.05),
aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
### Data preparation
### Remove everything unnecessary for histograms of initial data
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
head(ini.dat)
# create new column for Site_era
ini.dat$siteEra <- as.factor(paste(ini.dat$site, ini.dat$time, sep = "_"))
unique(ini.dat$siteEra)
# Reorder levels for plotting
ini.dat$siteEra <- factor(ini.dat$siteEra, rev(c("SC_past", "SC_present",
"PG_present", "ON_present")))
# violin plot
my_label <- expression(paste("Density (no. ", m^-2, ")"))
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 1,
size = rel(1.2)))
sizePlot <- ggplot(ini.dat,  aes(x = siteEra, y = ini.area, fill = time)) +
ylab(expression(paste("Size (", cm^2, ")"))) +
geom_violin(position = position_dodge(1)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
scale_x_discrete("", labels = c("SC_past" = "Shady Cove\n1969\nn=164",
"SC_present" = "Shady Cove\n2007\nn=144",
"PG_present" = "Point George\n2007\nn=159",
"ON_present" = "O'Neal\n2007\nn=315")) +
coord_flip() + theme(legend.position = "none") +
scale_fill_manual(values = c("darkgray", "white"))
p1 <- sizePlot + labs(title = "A") + ULClabel
dat <- read.csv("./data/bael_histoData.csv", header=TRUE, na.strings="NA")
### Data preparation
### Remove everything unnecessary for histograms of initial data
ini.dat <- droplevels(dat[dat$ini.notes != "angle" & dat$ini.notes != "fuzzy" &
dat$ini.notes != "gone" & dat$ini.notes != "nv" &
dat$ini.notes != "tentacles", ])
ini.dat <- droplevels(ini.dat[complete.cases(ini.dat$ini.area), ]) # drop NAs
head(ini.dat)
# create new column for Site_era
ini.dat$siteEra <- as.factor(paste(ini.dat$site, ini.dat$time, sep = "_"))
unique(ini.dat$siteEra)
# Reorder levels for plotting
ini.dat$siteEra <- factor(ini.dat$siteEra, rev(c("SC_past", "SC_present",
"PG_present", "ON_present")))
# violin plot
my_label <- expression(paste("Density (no. ", m^-2, ")"))
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 1,
size = rel(1.2)))
sizePlot <- ggplot(ini.dat,  aes(x = siteEra, y = ini.area, fill = time)) +
ylab(expression(paste("Size (", cm^2, ")"))) +
geom_violin(position = position_dodge(1)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
scale_x_discrete("", labels = c("SC_past" = "Shady Cove\n1969\nn=164",
"SC_present" = "Shady Cove\n2007\nn=144",
"PG_present" = "Point George\n2007\nn=159",
"ON_present" = "O'Neal\n2007\nn=315")) +
coord_flip() + theme(legend.position = "none") +
scale_fill_manual(values = c("darkgray", "white"))
p1 <- sizePlot + labs(title = "A") + ULClabel
p3 <- meanDensPlot + ULClabel + labs(title = "B Shady Cove")
p2
p3
p3 <- meanDensPlot + ULClabel + labs(title = "B                    Shady Cove")
p3
multiplot(p1, p2, cols = 2)
multiplot(p1, p3, cols = 2)
p3 <- meanDensPlot + ULClabel + labs(title = "B    Shady Cove")
p3
multiplot(p1, p3, cols = 2)
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
meanDensPlot <- ggplot(data = meanDensData, aes(as.factor(year), meanDens)) +
xlab("") + ylab(my_label) +
geom_jitter(size = 3, alpha = 1,
position = position_jitter(width = 0.05),
aes(color = era, shape = era)) +
theme(legend.position = "none") +
scale_colour_manual(breaks = c("historic", "modern"),
values = c("darkgray", "black")) +
scale_shape_manual(breaks = c("historic", "modern"),
values = c(18, 20))
p3 <- meanDensPlot + ULClabel + labs(title = "B              Shady Cove")
p3
# with mean quad densities
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
# with mean quad densities
p3 <- meanDensPlot + ULClabel + labs(title = "B                 Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel + labs(title = "B         Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel + labs(title = "B                 Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel + labs(title = "  B              Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B       Shady Cove        ")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B                 Shady Cove        ")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B                 Shady Cove")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
p3 <- meanDensPlot + ULClabel +
labs(title = "B")
pdf("./figs/sizeMeanDensityPlot.pdf", width = 7, height = 3.5)
multiplot(p1, p3, cols = 2)
dev.off()
Cand.mod <- list()
Cand.mod[[1]] <- lmer(meanDens ~ era + (1|tran),
REML = FALSE, data = meanDensData)
Cand.mod[[2]] <- lmer(meanDens ~ 1 + (1|tran),
REML = FALSE, data = meanDensData)
# Present the more conservative statistical results in manuscript
# (meanDensData)
#generate AICc table with names
mod_text <- c("Era", "Null model")
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text,
sort=TRUE, second.ord=TRUE) # second.ord =TRUE means AICc is used
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, "./output/densityAIC.csv")
summary(Cand.mod[[1]])
bestMod <- Cand.mod[[1]]
# check normality and homogeneity of variances
par(mfrow = c(1,2))
qqnorm(resid(bestMod))
qqline(resid(bestMod))
plot(resid(bestMod) ~ fitted(bestMod)); abline(h=0)
